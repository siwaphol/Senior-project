<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Single Sign-On Server/Client Documentation</title>
<link rel="shortcut icon" href="https://barebonescms.com/favicon.ico" type="image/x-icon">
<link rel="stylesheet" href="Single%20Sign-On%20Server_Client%20Documentation_files/Main.css" type="text/css" media="all">
<link rel="stylesheet" href="Single%20Sign-On%20Server_Client%20Documentation_files/shCore.css" type="text/css" media="all">
<link rel="stylesheet" href="Single%20Sign-On%20Server_Client%20Documentation_files/shThemeBarebones.css" type="text/css" media="all">
<script type="text/javascript">
var Gx__RootURL = '';
var Gx__SupportPath = 'support';
var Gx__URLBase = '/documentation/sso/index.php';
var Gx__PrefLang = 'en_us';
var Gx__FullRootURL = 'http://barebonescms.com';
var Gx__FullRootURLHTTP = 'http://barebonescms.com';
var Gx__FullRootURLHTTPS = 'https://barebonescms.com';
var Gx__FullURLBase = 'http://barebonescms.com/documentation/sso/index.php';
var Gx__FullURLBaseHTTP = 'http://barebonescms.com/documentation/sso/index.php';
var Gx__FullURLBaseHTTPS = 'https://barebonescms.com/documentation/sso/index.php';
var Gx__MaxSendSize = 2097152;
</script>
<script type="text/javascript" src="Single%20Sign-On%20Server_Client%20Documentation_files/shCore.js"></script>
<script type="text/javascript" src="Single%20Sign-On%20Server_Client%20Documentation_files/shBrushPHP.js"></script>
<script type="text/javascript" src="Single%20Sign-On%20Server_Client%20Documentation_files/barebones.js"></script>
<script type="text/javascript" src="Single%20Sign-On%20Server_Client%20Documentation_files/shBrushHTML.js"></script>
<script type="text/javascript" src="Single%20Sign-On%20Server_Client%20Documentation_files/shBrushPlain.js"></script>
</head>
<body>
<script type="text/javascript" src="Single%20Sign-On%20Server_Client%20Documentation_files/easyedit.js"></script>

<script type="text/javascript" src="Single%20Sign-On%20Server_Client%20Documentation_files/mobile.js"></script>
<script type="text/javascript" src="Single%20Sign-On%20Server_Client%20Documentation_files/mobile2.js"></script>
<div class="pagewrap">
	<div class="headerwrap">
		<a class="mainlogo" href="http://barebonescms.com/"><img src="Single%20Sign-On%20Server_Client%20Documentation_files/main-logo.png" alt="Barebones CMS"></a>
		<div class="quicklinks">
			<a href="https://barebonescms.com/download/">Download</a> | <a href="https://barebonescms.com/documentation/">Documentation</a> | <a href="https://barebonescms.com/forums/">Forums</a>
		</div>
	</div>
	<div class="contentwrap">
<h1>Single Sign-On Server/Client Documentation</h1>

<p>Do you need a PHP login system that rocks?  Well, you found it.</p>

<p>The Single Sign-On (SSO) server and client is a complete SSO system 
in a single, self-contained package.  This system is designed to be 
secure, massively scalable, and capable of handling outages.  The SSO 
server has an easy to use point-and-click administrative interface for 
quick configuration and access to user account information. Versioned 
accounts make it possible to fill in additional information  and display
 custom messages to users before allowing access to the  account (e.g. 
tell users about a new product).  The SSO client (for PHP and ASP.NET) 
integrates with numerous existing software products with minimal effort.
 The system also comes with an example API and a framework for native 
apps for Android, iOS, Windows Phone 8, and <a href="http://www.wxwidgets.org/">wxWidgets</a>
 (Windows, Mac, and Linux desktop). This SSO system will quite literally
 handle all of your current and future needs regarding user account 
management across all popular web browsers, devices, and platforms.</p>

<p>Also, the SSO server/client comes with clear, easy to follow 
documentation on setting it up.  Instead of inundating you with weird 
terms like Federation, iDP, SAML, etc. and expectations on knowing what 
those rather dense terms mean, this product takes a different approach 
where all the behind-the-scenes stuff stays behind the scenes.  As long 
as you can follow step-by-step directions, you'll be up and running in 
just a few hours with a very slick sign in system that is 
point-and-click setup with a little programming.  Don't worry about the 
programming part because there is plenty of example code and forums with
 friendly folks if you get stuck.</p>

<h2>Features</h2>

<p>This tool is split into three components:  The SSO server, SSO 
client, and native app frameworks/examples.  The following is a list of 
several features of the SSO server:</p>

<ul>
	<li>Cross-domain and cross-server capable.  The SSO server can reside on its own domain and host.</li>
	<li>Massively scalable architecture.  The server understands 
master-slave database replication and generally delays execution of 
change queries until the end of a request to minimize queries against a 
master database.  It is built to easily scale out to as many boxes as 
you have available.</li>
	<li>Resilient architecture.  The server can go offline or become 
unavailable and SSO client authenticated users can continue to work 
without negatively affecting the integrity of this system.</li>
	<li>Resource friendly.  Each frontend user uses an average footprint of
 4MB RAM per connection in the out-of-the-box install.  The endpoint is 
only an average of 1MB RAM.  The server includes tips on how to keep the
 system running lean and mean under high-performance scenarios.</li>
	<li>Easy to use administrative interface.  Point and click to set up 
and manage fields, tags, providers, API keys, and user accounts.</li>
	<li>Integrates with a variety of backend databases via <a href="https://barebonescms.com/documentation/csdb/">CSDB</a>.  MySQL, Maria DB, PostgreSQL, etc.</li>
	<li>A 'cron' interface is available for scheduled, automated database cleanup.</li>
	<li>Set up your own branded header and footer.  The examples include a stylesheet with a modern, clean look.</li>
	<li>Versioned accounts.  Display special messages to users such as new 
Terms of Service, a new product or newsletter or other marketing 
messages, and/or have the user fill in missing information after 
authenticating but before returning to the SSO client.  Doubles as an 
anti-bot measure.</li>
	<li>Anti-bot dynamic form field support. Form fields are randomly named
 based on the randomly generated session ID.  Since the order of most 
fields is controlled by the admin interface, this becomes a bot 
operator's nightmare.</li>
	<li>Encrypted data storage of private data.  Protects against successful hacking attempts that only dump the database.</li>
	<li>Multiple encryption ciphers and optional <a href="http://cubicspot.blogspot.com/2013/02/extending-block-size-of-any-symmetric.html">dual encryption mode</a> support.</li>
	<li>Set up and use tags as a permissions system or for special account flags for any purpose.</li>
	<li>Field setup and field mapping architecture allow for quickly managing user account fields.</li>
	<li>Simple API key setup and usage.  Easily map server fields to 
expected client fields. API keys can be revoked or renewed in the event 
of a security breach.</li>
	<li>API key namespaces allow an active sign in to be shared across applications.</li>
	<li>User impersonation support.  One-click sign in.  Disabled by default but straightforward to set up if needed.</li>
	<li>Comes with several sign in providers:  Generic Login, Facebook, Google, LinkedIn, LDAP (Active Directory), and Remote Login.</li>
	<li>The Generic Login provider has all sorts of features:  AJAX live checking, '<a href="http://en.wikipedia.org/wiki/Bcrypt">bcrypt</a>'-style password hashing, e-mail verification, account recovery via e-mail and <a href="https://github.com/cubiclesoft/email_sms_mms_gateways">SMS</a>, <a href="http://en.wikipedia.org/wiki/Two-factor_authentication">Two-factor authentication</a> (<a href="https://support.google.com/accounts/answer/1066447?hl=en">Google Authenticator</a>/<a href="http://go.microsoft.com/fwlink/?LinkId=279710">Microsoft Authenticator</a>/<a href="https://winauth.com/">WinAuth</a> and e-mail modules), password expiration, minimum required password strength, <a href="http://www.google.com/recaptcha">reCAPTCHA</a>, remember me, anti-phishing setup, rate limiting, blacklisting, progressive enhancement, and much more.</li>
	<li>The Remote Login provider allows for signing in using a trusted 
host behind a firewall.  For example, sign in with LDAP or Active 
Directory via VPN and push the user's information to the SSO Server via a
 native SSO Client call.</li>
	<li>Carefully crafted defenses to deal with <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">CSRF/XSRF attacks</a>, <a href="http://en.wikipedia.org/wiki/Timing_attack">timing attacks</a>, <a href="http://en.wikipedia.org/wiki/Session_fixation">session fixation attacks</a>, etc.</li>
	<li><a href="http://en.wikipedia.org/wiki/DNSBL">DNSRBL</a> IP address banning support.</li>
	<li>Geolocation IP address banning and automatic location mapping support (requires uploading an extra 15MB+ database).</li>
	<li>Trusted upstream proxy support.</li>
	<li>IPv4 and IPv6 filtering support.</li>
	<li>Multilingual support.</li>
	<li>A simple, easy-to-use installer.</li>
</ul>

<p>Now for a list of features of the SSO client:</p>

<ul>
	<li>Average memory footprint.  About 1MB RAM per connection.</li>
	<li>Classes and functions are carefully named to avoid naming conflicts
 with third-party software.  Makes integrating with third-party software
 a  breeze.</li>
	<li>When authentication is required prior to executing some task (e.g. 
posting a comment), the SSO client encrypts and sends the current 
request data ($_GET, $_POST, etc.) to the SSO server for later retrieval
 and will resume exactly where it left off in most cases (e.g. the 
comment is posted).  File uploads are lost during this procedure.</li>
	<li>Encrypts communications over the network (even HTTP).</li>
	<li>Cookies are encrypted.</li>
	<li>Communicates with the server on a schedule set by the client.  
Allows for significantly reduced network overhead without affecting 
system integrity.</li>
	<li>Supports both encrypted cookie (default 50 bytes max per key-value 
pair) and optional local database storage (virtually unlimited).</li>
	<li>Simple enough to port to other scripting and programming languages.  Currently available for:  PHP 5.3 (and later) and ASP.NET.</li>
	<li>A simple, easy-to-use installer.</li>
</ul>

<p>And much more.  If your jaw is currently on the floor, please pick it up.</p>

<h2>Live Demos</h2>

<p>Nothing beats a live demonstration of a working Single Sign-On (SSO) 
system.  The following demos use the SSO system running on this website:</p>

<ul>
	<li><a href="https://barebonescms.com/demos/admin_pack/addressbook2/">Address Book 2</a> - An address book demo application utilizing <a href="https://barebonescms.com/documentation/admin_pack/">Admin Pack</a> with multiple user, mobile  device, and Single Sign-On Server/Client integration support.  See <a href="https://barebonescms.com/documentation/admin_pack/">Admin Pack</a> for more details and to download the demo.</li>
	<li><a href="https://barebonescms.com/download/files/?file=sso-3.5.zip">Download Protection</a> - Protected download system that requires signing in via the SSO server before a file can be obtained.</li>
	<li><a href="https://barebonescms.com/forums/">Forums</a> - The <a href="http://mybb.com/">MyBB-based forums</a> on this site use the SSO server/client to manage sign ins via a MyBB plugin (available on the download page).</li>
	<li><a href="https://barebonescms.com/sso_native_app_demos.zip">Example Native Apps</a> - Precompiled binaries of the native apps for Android, iOS, Windows Phone 8, and Windows.</li>
</ul>

<p>Using a Single Sign-On system allows for one sign in to be used to 
access multiple, disparate resources optionally across multiple domains.</p>

<h2>License</h2>

<p>Like Barebones CMS, both the SSO server and client are dual-licensed 
under a MIT or LGPL  license - your choice.  The license and 
restrictions are identical to  the <a href="https://barebonescms.com/documentation/license_and_restrictions/">Barebones CMS License</a>.</p>

<h2>Donations</h2>

<p>If you use this product, <a href="https://barebonescms.com/donate/">donate financially or with some of your time</a>, to support future development efforts.</p>

<h2>Downloads</h2>

<p>Single Sign-On Server/Client 3.5 is the latest stable release of Single Sign-On Server/Client.</p>

<p><a href="https://barebonescms.com/download/files/?file=sso-3.5.zip">Download sso-3.5.zip</a></p>

<p><a href="https://barebonescms.com/barebones_sso_plugin-2.0.zip">Download barebones_sso_plugin-2.0.zip</a> (Barebones CMS plugin and login hook)</p>

<p><a href="https://barebonescms.com/sso_client_asp_net.zip">Download sso_client_asp_net.zip</a> (ASP.NET port of the SSO client)</p>

<p>Other plugins: <a href="https://barebonescms.com/MyBB_SSOClient-2.2.zip">MyBB</a></p>

<p>If you find the Single Sign-On Server/Client useful, please <a href="https://barebonescms.com/donate/">donate toward future development efforts</a>.</p>

<h2>Terminology and Concepts</h2>

<p>Unless you have used a Single  Sign-On (SSO) system before, there is 
some terminology that you will  need to understand to be able to work 
with this software product.</p>

<ul>
	<li>Field - A place to store information about a user.  First name, last name, e-mail address, location, etc.</li>
	<li>Tag  - A place to store administrative access permissions to other 
systems  or special flags for any purpose.  Primarily for manually added
  permissions and roles.  Forum moderator, editor, etc.</li>
	<li>Provider -  An access authentication and authorization mechanism.  
Generally adds  entries to the administrative interface and the end-user
 interface.</li>
	<li>Provider  ID - An ID that a provider provides during authentication
 with the SSO  server that, when combined with the provider, uniquely 
identifies an  associated user account.</li>
	<li>User Account - Stores a unique ID, provider name, provider ID, fields, and associated tags.</li>
	<li>Endpoint - A URL that exposes the API of the SSO server.</li>
	<li>API Key - Consists of a short string and a numeric ID.  API keys 
are used during SSO client installation and grants access to the SSO 
server endpoint.</li>
	<li>API  Secret - A secret, shared token used for encryption of data 
sent across  the wire.  The API secret is stored alongside an API key 
and used  during SSO client installation and grants access to the SSO 
server endpoint.</li>
	<li>Namespace - Each API key has a  namespace.  When a user signs in to
 one application, they will be signed  in automatically if they visit 
another application using another API  key in the same namespace.</li>
</ul>

<p>The  SSO server separates login information from account information.
  The  SSO server only knows what a Provider and a user account are, but
 not a  login.  Today, a Provider will implement a standard login 
system.   However, if software developers figure out a way to eliminate 
usernames  and passwords in the future, this SSO server can easily adapt
 to the new  approach via a new Provider.</p>

<p>The SSO client communicates with the SSO server using an API key and encrypts the transmission using the associated API secret.</p>

<h2>Architecture Overview</h2>

<p>If you are the type of person who likes to know how things work at a 
high-level before delving into implementation details, this section is 
for you.  A simplified breakdown of how things work is:</p>

<ul>
	<li>The SSO server and client are two distinctly separate pieces of installable software that talk to each other.</li>
	<li>Your application interfaces with the SSO client.</li>
	<li>The SSO client is an installed piece of software that interfaces 
with the SSO server endpoint via an API key and secret.  Each 
application should have its own distinct SSO client install.</li>
	<li>The SSO server endpoint directs the SSO client regarding session information.</li>
	<li>If the user is not signed in or doesn't have the appropriate 
permissions, the application uses the SSO client library to initiate a 
new session with the SSO server (via the endpoint API).</li>
	<li>The SSO client redirects the browser to the SSO server frontend when a new session is successfully initiated.</li>
	<li>The SSO server frontend is broken down into two steps:  Authentication and validation.</li>
	<li>During authentication, the SSO server frontend lets the user pick 
from the available providers.  If there is only one provider, that 
provider is automatically chosen.  The most popular provider is Generic 
Login, which implements a generic login system.  Providers are the 
gate-keepers that do authentication.  The SSO_ActivateUser() function 
moves the user to the validation step.</li>
	<li>During validation, customization of the frontend is possible.  
Developers can do whatever they want during this step.  The most common 
thing to do is have the user fill in information that is missing from 
their profile that the SSO client (and your application) needs.  What 
fields are needed are dictated by the the API key used by the SSO 
client.</li>
	<li>The SSO_ValidateUser() function finalizes the sign in and redirects the browser back to the application.</li>
	<li>Your application, already interfaced with the SSO client, 
implicitly notices that the browser has just come back from the SSO 
server.</li>
	<li>The SSO client saves the new session information, redirects the 
browser one last time, loads the previous session's data from the SSO 
server ($_GET, $_POST, etc), and the application continues on from where
 it left off.</li>
</ul>

<p>As far as most developers are concerned, the following set of steps 
will construct the first working application that uses the SSO server 
and client:</p>

<ul>
	<li>Install the SSO server.</li>
	<li>Set up a basic 'admin_hook.php' file that restricts access to the current IP address.</li>
	<li>Configure the basic settings.</li>
	<li>Set up fields.</li>
	<li>Configure the first provider (usually Generic Login).</li>
	<li>Configure the first API key and secret.</li>
	<li>Install the SSO client.</li>
	<li>Test the SSO client.  Both Object Oriented ('test_oo.php') and 
non-OO ('test_flat.php') samples exist - either one will form the basis 
of integrating your application with the SSO client.</li>
	<li>Set up 'header.php' and 'footer.php' on the SSO server so that 
provider selection, the Generic Login provider, error messages, and the 
validation phase have design and styling that provides a pleasing and 
consistent user experience with the rest of your website.</li>
	<li>Set up the SSO site admin account.</li>
	<li>Secure the SSO server.</li>
</ul>

<p>The SSO server and client are generally quite flexible, which is why 
so many steps are necessary to get a working and secure setup.  Once the
 first application is up and running, it becomes much easier to start 
deploying more.</p>

<h2>Upgrading the SSO Server/Client</h2>

<p>These upgrade instructions only apply to those who have previously 
installed an older version of the SSO Server/Client.  The SSO Server and
 SSO Client communicate with a tightly bound protocol.  Major version 
number jumps in the software package (e.g. 1.0 to 2.0) indicate that the
 underlying protocol and/or database schema has changed significantly 
and that all server and client components have to be upgraded.  Smaller 
version jumps (e.g. 2.0 to 2.1) indicate that there have been no 
protocol/database schema changes and upgrading just the server and 
whatever clients need to use a new feature will be necessary.</p>

<p>If you use the Security Through Obscurity (STO) feature of the SSO 
server, the 'admin.php' and 'endpoint.php' files will need to be 
uploaded separately to their respective directories on the web server 
when uploading files (i.e. 'admin_...' and 'endpoint_...').  If the 
files are uploaded by accident to the root SSO server directory with STO
 enabled, they won't function at the default location and the SSO client
 may not work properly because they will still be using the previous 
version of the endpoint. STO makes it harder for a hacker to find the 
location of the admin and endpoint but also adds a little extra time to 
the upgrade process.</p>

<p>Since these instructions are fairly short, they come before the 
extensive installation documentation.  If you are installing the server 
and client for the first time, just skip ahead.</p>

<h3>Major Version Upgrades</h3>

<p>Major version upgrades take time to complete and can be a little 
nerve-wracking.  You should schedule time for the SSO server and client 
to be offline/unavailable in which to work.  Total time for a major 
version upgrade depends on a lot of factors, including how large the 
database is if there are schema changes, how many clients need to be 
upgraded, etc.</p>

<p>The upgrade procedure is as follows:</p>

<ul>
	<li>Back up your database in case something goes horribly wrong.</li>
	<li>Read the official forum post carefully to understand the impact.</li>
	<li><a href="https://barebonescms.com/download/">Download the latest SSO Server/Client package</a>, extract, and upload the 'server' files to the correct locations.  It is safe to overwrite existing files.</li>
	<li>You may wish to write an 'upgrade_hook.php' file to restrict how and where it may be run.   See the <a href="https://barebonescms.com/documentation/install_and_upgrade/">Barebones CMS installation instructions</a> for IP address restrictions.  For medium-sized databases, restrict it to only run from the command-line.</li>
	<li>Run 'upgrade.php' either via a web browser or the command-line.  
The command-line is generally more reliable because scripts can't get 
killed off by the web server for running too long.</li>
	<li>Delete 'upgrade.php' off the web server.  It technically shouldn't 
be possible for it to run again, but it is better to be safe than sorry.</li>
	<li>Upload the 'client' files to every client installation's directory.  Again, it is safe to overwrite existing files.</li>
	<li>Test each client to make sure nothing broke during the upgrade.</li>
</ul>

<p>And that's it.  If you encounter any problems upgrading, visit the forums on this site.</p>

<h3>Minor Version Upgrades</h3>

<p>Minor version upgrades take less time and planning to execute than 
major version upgrades.  The upgrade procedure is similar to major 
version upgrades:</p>

<ul>
	<li>Back up your database in case something goes horribly wrong.</li>
	<li><a href="https://barebonescms.com/download/">Download the latest SSO Server/Client package</a>,
 extract, and upload the 'server' files to the correct locations.  It is
 safe to overwrite existing files.  Don't upload 'upgrade.php'.</li>
	<li>Upload the 'client' files to every client installation's directory 
that needs access to new features/changes.  Again, it is safe to 
overwrite existing files.</li>
	<li>Test each client to make sure nothing broke during the upgrade.</li>
</ul>

<p>And that's it.  If you encounter any problems upgrading, visit the forums on this site.</p>

<h2>SSO Server Installation</h2>

<p>Installing the SSO server is similar to <a href="https://barebonescms.com/documentation/install_and_upgrade/">installing Barebones CMS</a>.
  But, due to its flexibility, it does require writing some extra code. 
 However, don't worry - there are lots of examples to work from.  The 
SSO server can reside on any host but must be accessible to a SSO 
client, the end-user, and any servers a provider might need to talk to. 
The SSO Server is written in PHP and requires a minimum of PHP 5.3 but 
preferably the latest version of PHP should be used. A <a href="https://barebonescms.com/documentation/csdb/">CSDB</a>-compliant
 database host is required to install the SSO server.  The SSO server is
 also master/slave replication-aware if you need to scale out the 
database or already use a replication cluster.</p>

<p>At any rate, the installation procedure is as follows:</p>

<ul>
	<li><a href="https://barebonescms.com/download/">Download the latest SSO Server/Client package</a>.</li>
	<li>Extract the contents and upload everything in the 'server' 
directory to the destination host - except 'install.php' and 
'upgrade.php'.</li>
	<li>Write an 'install_hook.php' file restricting access to just your IP
 address and upload it.  See the Barebones CMS installation instructions
 for how to do this.</li>
	<li>Upload 'install.php'.</li>
	<li>Run the installer.</li>
</ul>

<p>Take your time installing and setting up the SSO server since it will
 likely be around for a really long time.  During the installation, a 
compatibility checklist is shown.  It is highly recommended that all 
tests on the compatibility checklist pass before installing the SSO 
server.  Some of the items will significantly impact the security and 
performance of the system if they don't pass.</p>

<p>If you opt to "Use CRON For Cleanup" during the installation, be sure
  to set up 'cron.php' to run on a schedule.  It may be necessary to  
change permissions and modify the file a little to get it working.  If  
the file is modified, rename 'cron.php' to something else so that 
upgrading the SSO server  will be easier to do in the future.</p>

<p>After installation, the server needs to be set up for its first SSO 
client.  The administrative interface requires a file called 
'admin_hook.php' to exist that sets up '$bb_usertoken' before it will 
function.  Create a file called 'admin_hook.php' and copy and paste the 
following code into the newly created file (may need to be modified if 
you are behind a firewall):</p>
<script type="text/javascript" src="Single%20Sign-On%20Server_Client%20Documentation_files/syntax_admin_hook.htm"></script><div class="syntaxhighlight-wrap"><div class="syntaxhighlighter  " id="highlighter_492944"><div class="bar"><div class="toolbar"><a class="item viewSource" style="width: 16px; height: 16px;" title="view source" href="#viewSource">view source</a><div class="item copyToClipboard"><embed id="highlighter_492944_clipboard" type="application/x-shockwave-flash" title="copy to clipboard" allowscriptaccess="always" wmode="transparent" flashvars="highlighterId=highlighter_492944" menu="false" src="Single%20Sign-On%20Server_Client%20Documentation_files/clipboard.swf" height="16" width="16"></div><a class="item printSource" style="width: 16px; height: 16px;" title="print" href="#printSource">print</a><a class="item about" style="width: 16px; height: 16px;" title="?" href="#about">?</a></div></div><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="php-tag">&lt;?php</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>2</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(!</code><code class="php-function functions">defined</code><code class="plain">(</code><code class="php-string string">"SSO_FILE"</code><code class="plain">))&nbsp; </code><code class="php-function functions">exit</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>4</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(</code><code class="php-variable variable">$_SERVER</code><code class="plain">[</code><code class="php-string string">"REMOTE_ADDR"</code><code class="plain">] != </code><code class="php-string string">"202.28.250.125"</code><code class="plain">)&nbsp; </code><code class="php-function functions">exit</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>5</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>6</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$bb_usertoken</code> <code class="plain">= </code><code class="php-string string">"bc646a16deca5dd4e6969bc674a81f90"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>7</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$sso_site_admin</code> <code class="plain">= </code><code class="php-keyword keyword">true</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>8</code></td><td class="content"><code class="php-tag">?&gt;</code></td></tr></tbody></table></div></div></div></div>

<p>The above code is a simple way to initially access the administration
 interface.  This code isn't secure but it will be secured properly in a
 bit, so keep following along.</p>

<p>Now upload the 'admin_hook.php' file to the same directory as 
'admin.php'.  If you opted to move 'admin.php' to a randomly named 
directory during the installation, you will have to figure out what the 
name of the directory is.  Now click the link at the end of the 
installation to enter the administration interface.</p>

<p>The next few sections provide general guidance on how to set up the initial SSO server environment.</p>

<h2>SSO Server Global Configuration</h2>

<p>You can configure the server however you want and the configuration 
can be changed at any time.  You will likely bounce around between 
various areas of the administration interface as you set things up.</p>

<p>Start with the "Configure" option under "SSO Server Options" and set 
the preferred timezone for the administration interface as well as set 
up any desired global whitelist and blacklist options - the settings 
here affect all Providers.</p>

<p>There are two semi-advanced options in the global configuration.  
There is a way to reset the namespace encryption key and IV that is used
 to encrypt the namespace cookie and the other option deals with <a href="http://en.wikipedia.org/wiki/Clock_drift">clock drift</a>.
  Understanding clock drift will help with deploying a sensible SSO 
server and client environment for your needs.  The default clock drift 
is set to five minutes (300 seconds).  This translates to a minimum of a
 10 minute session regardless of what the SSO client declares as the 
session length because the SSO server automatically adjusts the minimum 
based on clock drift settings.  Clock drift happens because computers 
can't keep perfect time.  This causes problems that usually aren't 
noticeable on a single computer but across a network of machines it 
becomes apparent.  Each SSO client packet is timestamped with the 
current date and time before encrypting the packet and sending it to the
 SSO server endpoint.  The SSO server endpoint verifies that the packet 
timestamp is within acceptable limits to reduce the probability of a <a href="http://en.wikipedia.org/wiki/Replay_attack">replay attack</a>.
  This is where clock drift comes into play - the SSO client and server 
can be on completely different computers whose clocks likely aren't in 
perfect synchronization.  In addition, the SSO client will attempt to 
send the same packet up to three times because networks are notoriously 
unreliable.  The endpoint also applies a random delay to any request.  
Networks also have delays in delivery.  A five minute window in either 
direction is decent, but it does force a minimum session length of ten 
minutes.  Clock drift can be configured globally or on a per API key 
basis.  Start with the default and adjust on an as-needed basis keeping 
in mind that minimum session length is clock drift * 2.</p>

<p>If a user is declared to be a spammer, the system default is to not 
provide any details about the situation and only outputs the generic 
message, "This system does not have any active providers.  Either no 
providers have been configured or your current location has been 
blocked."  That message, while accurate, is entirely unhelpful to the 
user.  The server configuration option "No Providers Message" allows for
 additional details to be provided.  This site uses the following:</p>

<div class="shortcode"><div class="syntaxhighlight-wrap"><div class="syntaxhighlighter  " id="highlighter_826370"><div class="bar"><div class="toolbar"><a class="item viewSource" style="width: 16px; height: 16px;" title="view source" href="#viewSource">view source</a><div class="item copyToClipboard"><embed id="highlighter_826370_clipboard" type="application/x-shockwave-flash" title="copy to clipboard" allowscriptaccess="always" wmode="transparent" flashvars="highlighterId=highlighter_826370" menu="false" src="Single%20Sign-On%20Server_Client%20Documentation_files/clipboard.swf" height="16" width="16"></div><a class="item printSource" style="width: 16px; height: 16px;" title="print" href="#printSource">print</a><a class="item about" style="width: 16px; height: 16px;" title="?" href="#about">?</a></div></div><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>01</code></td><td class="content"><code class="plain">&lt;</code><code class="keyword">div</code> <code class="color1">class</code><code class="plain">=</code><code class="string">"sso_main_wrap"</code><code class="plain">&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>02</code></td><td class="content"><code class="plain">&lt;</code><code class="keyword">div</code> <code class="color1">class</code><code class="plain">=</code><code class="string">"sso_main_wrap_inner"</code><code class="plain">&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>03</code></td><td class="content"><code class="plain">@BLOCKDETAILS@</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>04</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>05</code></td><td class="content"><code class="plain">&lt;</code><code class="keyword">p</code><code class="plain">&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>06</code></td><td class="content"><code class="plain">If there are additional details above, please correct the problem(s) from your end.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>07</code></td><td class="content"><code class="plain">Note that even if an IP block is cleared, it will take two weeks for the local cache to clear.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>08</code></td><td class="content"><code class="plain">If there are no additional details, please contact the website administrator at:&nbsp; webmaster @ cubiclesoft . com</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>09</code></td><td class="content"><code class="plain">&lt;/</code><code class="keyword">p</code><code class="plain">&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>10</code></td><td class="content"><code class="plain">&lt;/</code><code class="keyword">div</code><code class="plain">&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>11</code></td><td class="content"><code class="plain">&lt;/</code><code class="keyword">div</code><code class="plain">&gt;</code></td></tr></tbody></table></div></div></div></div></div>

<p>The @BLOCKDETAILS@ token is replaced with information on why the user
 is declared to be a spammer.  From there the user can take appropriate 
action to remove the block.  Note that information about an IP address 
is cached for 14 days (by default).  Even if a block is immediately 
removed, it will take additional time for the cached IP information to 
leave the SSO server.</p>

<p>The SSO server whitelist is a common field found in both the global 
server configuration and each provider configuration.  It consists of 
one or more IP address patterns that are allowed to access or use the 
server or provider.  Also, patterns should generally be IPv6 rather than
 IPv4.</p>

<p>Blacklists come in two flavors:  DNSRBL and GeoIP blacklists.  If an 
IP address is on a blacklist, it will be unable to access the server or 
the specific provider.  Generally, an IP address should only be added to
 a blacklist if it is a spammer IP.  For the global DNSRBL 
configuration, it is highly recommended to use the following setup:</p>

<div class="shortcode"><div class="syntaxhighlight-wrap"><div class="syntaxhighlighter  " id="highlighter_579530"><div class="bar  "><div class="toolbar"><a class="item viewSource" style="width: 16px; height: 16px;" title="view source" href="#viewSource">view source</a><div class="item copyToClipboard"><embed id="highlighter_579530_clipboard" type="application/x-shockwave-flash" title="copy to clipboard" allowscriptaccess="always" wmode="transparent" flashvars="highlighterId=highlighter_579530" menu="false" src="Single%20Sign-On%20Server_Client%20Documentation_files/clipboard.swf" height="16" width="16"></div><a class="item printSource" style="width: 16px; height: 16px;" title="print" href="#printSource">print</a><a class="item about" style="width: 16px; height: 16px;" title="?" href="#about">?</a></div></div><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>01</code></td><td class="content"><code class="plain"># dnsbl.tornevall.org offers HTTP blacklisting via StopForumSpam.com's database.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>02</code></td><td class="content"><code class="plain"># To add a spammer to this list, visit:&nbsp; <a href="http://www.stopforumspam.com/add.php">http://www.stopforumspam.com/add.php</a></code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>03</code></td><td class="content"><code class="plain"># For more information, visit:&nbsp; <a href="http://www.stopforumspam.com/usage">http://www.stopforumspam.com/usage</a></code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>04</code></td><td class="content"><code class="plain"># Be sure to donate:&nbsp; <a href="http://www.stopforumspam.com/donate">http://www.stopforumspam.com/donate</a></code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>05</code></td><td class="content"><code class="plain"><a href="https://dnsbl.tornevall.org/">https://dnsbl.tornevall.org/</a>|dnsbl.tornevall.org|127.0.0.&amp;64</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>06</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>07</code></td><td class="content"><code class="plain"># HTTP:bl is a Honeypot Project DNSRBL.&nbsp; Registration is required to use the service.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>08</code></td><td class="content"><code class="plain"># For more information, visit:&nbsp; <a href="http://www.projecthoneypot.org/httpbl.php">http://www.projecthoneypot.org/httpbl.php</a></code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>09</code></td><td class="content"><code class="plain"># Be sure to donate:&nbsp; <a href="http://www.projecthoneypot.org/donate.php">http://www.projecthoneypot.org/donate.php</a></code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>10</code></td><td class="content"><code class="plain"><a href="http://www.projecthoneypot.org/list_of_ips.php">http://www.projecthoneypot.org/list_of_ips.php</a>|[YourPassword].@IP@.dnsbl.httpbl.org|127.&lt;60.&gt;9.&gt;0</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>11</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>12</code></td><td class="content"><code class="plain"># dnsbl.sorbs.net offers a limited HTTP DNSRBL that doesn't catch many spammers.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>13</code></td><td class="content"><code class="plain"># For more information, visit:&nbsp; <a href="http://dnsbl.sorbs.net/">http://dnsbl.sorbs.net/</a></code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>14</code></td><td class="content"><code class="plain"><a href="http://dnsbl.sorbs.net/">http://dnsbl.sorbs.net/</a>|dnsbl.sorbs.net|127.0.0.2|127.0.0.7</code></td></tr></tbody></table></div></div></div></div></div>

<p>GeoIP blacklisting takes an IP address and maps it to a physical 
location in the world.  It isn't accurate or always right but it is 
usually good enough to identify someone's physical location to a city 
level.  In order to use GeoIP blacklists, an IPv6 compatible database 
will have to be obtained and uploaded into the 'support' directory (e.g.
 'GeoLiteCityv6.dat').</p>

<p>The global configuration also has GeoIP mapping options to take a 
GeoIP location field and map it to a SSO server field.  Again, this 
requires a valid IPv6 compatible database to function.</p>

<p>Whitelist and blacklist options are found in both global and provider
 configurations.  The global options are processed first followed by the
 specific provider options.</p>

<h2>SSO Server Field Setup</h2>

<p>A field stores a piece of information about a user.  It can contain 
anything such as first name, last name, e-mail address, etc.  Field data
 can be stored encrypted or unencrypted in the database. Ideally, all 
fields are encrypted, however only unencrypted fields are able to be 
searched when using the "Find User" option.  So, encrypt as many fields 
as make sense to encrypt.  You will still be able to edit encrypted 
field data.</p>

<div class="center-align shortcode"><div class="image-caption-wrap" style="width: 560px;"><div class="image-caption-image"><img src="Single%20Sign-On%20Server_Client%20Documentation_files/en_us_server_manage_fields.png" alt="The SSO server field manager."></div><div class="image-caption-text">The SSO server field manager.</div></div></div>

<p>To add a field, select the "Manage Fields" option under the "SSO 
Server Options" menu and then click "Add Field".  Fill in the form and 
click "Create".  The field will be added to the list in the field 
manager.  Fields in the field manager can easily be added, removed, 
enabled, disabled, sliced, diced, and toasted.  Changes to a field can 
be made at any time.</p>

<p>Of course, you may be wondering what fields to set up.  Have no fear!  Here is a list of common field names:</p>

<ul>
	<li>email - The user's e-mail address.</li>
	<li>username - The user's username.</li>
	<li>first_name - The user's first name.</li>
	<li>middle_name - The user's middle name or initial.</li>
	<li>last_name - The user's last name.</li>
	<li>gender - The user's gender.</li>
	<li>birthday_year - The user's year of birth.</li>
	<li>birthday_month - The user's birthday month.</li>
	<li>birthday_day - The user's birthday day.</li>
	<li>city - The user's city.</li>
	<li>state_region - The user's state or region.</li>
	<li>country - The user's country.</li>
</ul>

<p>It is a good idea to separate pieces of user information wherever 
possible.  Take 'first_name' and 'last_name' for instance.  While 
'full_name' could be a field that contains the user's full name, very 
few providers have support for a full name mapping and most SSO clients 
won't either.</p>

<p>Keep the number of fields to the minimum required for your needs.  
This helps keep RAM and storage requirements to a minimum and the server
 will run faster with fewer enabled fields.  Also, asking users for more
 information will tend to keep them away.</p>

<p>Encrypted fields can't be searched on.  The data goes into the 
database in a serialized and encrypted packet format.  There is no way 
to search such data.  If the field later is set to unencrypted, the user
 has to log in before the data becomes unencrypted and will show up in 
search results.  The "Reset All Sessions" option can force everyone to 
login again if they are already logged in.</p>

<p>When a field is mapped in a provider, the provider protects the field
 from being edited in the administrative interface and across the API 
endpoint.  This happens because the information will be overwritten the 
next time the user logs in using that provider.  It is up to each 
provider to provide editing capabilities for protected fields (if 
possible).</p>

<h2>SSO Server Tag Setup</h2>

<div class="float-right first-line shortcode"><div class="image-caption-wrap" style="width: 300px;"><div class="image-caption-image"><img src="Single%20Sign-On%20Server_Client%20Documentation_files/en_us_server_manage_tags.png" alt="The SSO server tag manager."></div><div class="image-caption-text">The SSO server tag manager.</div></div></div>

<p>A tag is generally an administrative permission but a tag can also  
change the behavior of an account in some specific way.  Tags are  
usually added manually to user accounts but they can also be added via 
automation.</p>

<p>There are three default tags that are set up during installation that
 can't be deleted or easily changed:  'sso_site_admin', 'sso_admin', and
 'sso_locked'.</p>

<p>The 'sso_site_admin' tag is intended to be used for an all-powerful 
admin account.  A user with this tag can grant and revoke privileges for
 any user in the system, including themselves via the SSO server 
administration interface.  As such, this tag is passed along 
automatically to SSO clients if the user has this tag associated with 
their account.</p>

<p>The 'sso_admin' tag is intended to be used to give certain users 
partial access to the SSO server administration interface.  These users 
have the ability to find users in the system and edit fields that aren't
 protected by a Provider.</p>

<p>The 'sso_locked' tag is used to lock an account.  Locked accounts 
stop a user from logging in while retaining their information.  This tag
 can be used to temporarily disable a user account for a misbehaving 
user or as a pre-deletion step.</p>

<p>Before a client is set up, at least one provider needs to be set up.</p>

<h2>SSO Server Provider:  Generic Login</h2>

<p>The SSO server comes with a generic login provider with a creative 
name of Generic Login.  Behind the scenes, this is known as 'sso_login' 
and is the largest, most flexible, and the most complex provider of all 
the included SSO server providers.</p>

<p>Installing this provider is easy but there is one critical choice to 
make:  Do you want users to sign up with a username, e-mail, or both?  
It depends heavily on your needs as to what gets selected during 
installation.  However, changing this later is basically impossible and 
the default setting is recommended.</p>

<p>After installing, configure the Generic Login provider.  Note that 
the default settings are set to be fairly liberal in terms of website 
security.  If e-mail address verification is desired, use a subject line
 like "[websitename] Verify your e-mail address" and a message along the
 lines of:</p>

<div class="shortcode"><div class="syntaxhighlight-wrap"><div class="syntaxhighlighter  " id="highlighter_537355"><div class="bar"><div class="toolbar"><a class="item viewSource" style="width: 16px; height: 16px;" title="view source" href="#viewSource">view source</a><div class="item copyToClipboard"><embed id="highlighter_537355_clipboard" type="application/x-shockwave-flash" title="copy to clipboard" allowscriptaccess="always" wmode="transparent" flashvars="highlighterId=highlighter_537355" menu="false" src="Single%20Sign-On%20Server_Client%20Documentation_files/clipboard.swf" height="16" width="16"></div><a class="item printSource" style="width: 16px; height: 16px;" title="print" href="#printSource">print</a><a class="item about" style="width: 16px; height: 16px;" title="?" href="#about">?</a></div></div><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>01</code></td><td class="content"><code class="plain">&lt;</code><code class="keyword">html</code><code class="plain">&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>02</code></td><td class="content"><code class="plain">&lt;</code><code class="keyword">body</code><code class="plain">&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>03</code></td><td class="content"><code class="plain">@USERNAME@,&lt;</code><code class="keyword">br</code> <code class="plain">/&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>04</code></td><td class="content"><code class="plain">&lt;</code><code class="keyword">br</code> <code class="plain">/&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>05</code></td><td class="content"><code class="plain">In order to verify your new WebsiteName account, please use the link below:&lt;</code><code class="keyword">br</code> <code class="plain">/&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>06</code></td><td class="content"><code class="plain">&lt;</code><code class="keyword">br</code> <code class="plain">/&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>07</code></td><td class="content"><code class="plain">@VERIFY@&lt;</code><code class="keyword">br</code> <code class="plain">/&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>08</code></td><td class="content"><code class="plain">&lt;</code><code class="keyword">br</code> <code class="plain">/&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>09</code></td><td class="content"><code class="plain">If clicking the link doesn't work, try copying it and then pasting it into your web browser's address bar.&lt;</code><code class="keyword">br</code> <code class="plain">/&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>10</code></td><td class="content"><code class="plain">&lt;</code><code class="keyword">br</code> <code class="plain">/&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>11</code></td><td class="content"><code class="plain">If you did not sign up for a WebsiteName account, please ignore this e-mail.&lt;</code><code class="keyword">br</code> <code class="plain">/&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>12</code></td><td class="content"><code class="plain">&lt;</code><code class="keyword">br</code> <code class="plain">/&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>13</code></td><td class="content"><code class="plain">Your anti-phishing phrase is:&lt;</code><code class="keyword">br</code> <code class="plain">/&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>14</code></td><td class="content"><code class="plain">&lt;</code><code class="keyword">br</code> <code class="plain">/&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>15</code></td><td class="content"><code class="plain">@ANTIPHISH@</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>16</code></td><td class="content"><code class="plain">&lt;/</code><code class="keyword">body</code><code class="plain">&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>17</code></td><td class="content"><code class="plain">&lt;/</code><code class="keyword">html</code><code class="plain">&gt;</code></td></tr></tbody></table></div></div></div></div></div>

<p>Replace "WebsiteName" with your website's name.  Also, the above example depends on the anti-phishing module being enabled.</p>

<p>If account recovery via e-mail is desired, use either the same 
subject line as the e-mail address verification and a message along the 
lines of:</p>

<div class="shortcode"><div class="syntaxhighlight-wrap"><div class="syntaxhighlighter  " id="highlighter_913826"><div class="bar"><div class="toolbar"><a class="item viewSource" style="width: 16px; height: 16px;" title="view source" href="#viewSource">view source</a><div class="item copyToClipboard"><embed id="highlighter_913826_clipboard" type="application/x-shockwave-flash" title="copy to clipboard" allowscriptaccess="always" wmode="transparent" flashvars="highlighterId=highlighter_913826" menu="false" src="Single%20Sign-On%20Server_Client%20Documentation_files/clipboard.swf" height="16" width="16"></div><a class="item printSource" style="width: 16px; height: 16px;" title="print" href="#printSource">print</a><a class="item about" style="width: 16px; height: 16px;" title="?" href="#about">?</a></div></div><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>01</code></td><td class="content"><code class="plain">&lt;</code><code class="keyword">html</code><code class="plain">&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>02</code></td><td class="content"><code class="plain">&lt;</code><code class="keyword">body</code><code class="plain">&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>03</code></td><td class="content"><code class="plain">@USERNAME@,&lt;</code><code class="keyword">br</code> <code class="plain">/&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>04</code></td><td class="content"><code class="plain">&lt;</code><code class="keyword">br</code> <code class="plain">/&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>05</code></td><td class="content"><code class="plain">In order to recover your WebsiteName account, use the link below:&lt;</code><code class="keyword">br</code> <code class="plain">/&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>06</code></td><td class="content"><code class="plain">&lt;</code><code class="keyword">br</code> <code class="plain">/&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>07</code></td><td class="content"><code class="plain">@VERIFY@&lt;</code><code class="keyword">br</code> <code class="plain">/&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>08</code></td><td class="content"><code class="plain">&lt;</code><code class="keyword">br</code> <code class="plain">/&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>09</code></td><td class="content"><code class="plain">If clicking the link doesn't work, try copying it and then pasting it into your web browser's address bar.&lt;</code><code class="keyword">br</code> <code class="plain">/&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>10</code></td><td class="content"><code class="plain">&lt;</code><code class="keyword">br</code> <code class="plain">/&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>11</code></td><td class="content"><code class="plain">If you did not request recovery for a WebsiteName account, please ignore this e-mail.&lt;</code><code class="keyword">br</code> <code class="plain">/&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>12</code></td><td class="content"><code class="plain">&lt;</code><code class="keyword">br</code> <code class="plain">/&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>13</code></td><td class="content"><code class="plain">Your anti-phishing phrase is:&lt;</code><code class="keyword">br</code> <code class="plain">/&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>14</code></td><td class="content"><code class="plain">&lt;</code><code class="keyword">br</code> <code class="plain">/&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>15</code></td><td class="content"><code class="plain">@ANTIPHISH@</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>16</code></td><td class="content"><code class="plain">&lt;/</code><code class="keyword">body</code><code class="plain">&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>17</code></td><td class="content"><code class="plain">&lt;/</code><code class="keyword">html</code><code class="plain">&gt;</code></td></tr></tbody></table></div></div></div></div></div>

<p>The two e-mails are very similar-looking.  These are just simple 
examples of HTML that might be used.  Obviously, it can get more 
complicated.  The HTML is automatically transformed into text upon 
saving and both the HTML and text versions are sent in a multipart 
e-mail.</p>

<p>There are several modules included with the Generic Login provider:</p>

<ul>
	<li>Anti-Phishing - When enabled, users select an anti-phishing phrase 
that appears on the login screen and can optionally be included in 
e-mails.</li>
	<li>Two-Factor Authentication via E-mail - Sends an e-mail containing a two-factor authentication code after the user signs in.</li>
	<li>Two-Factor Authentication via Google Authenticator - Allows the 
user to use Google Authenticator (or a compatible app) after the user 
signs in for two-factor authentication.</li>
	<li>Password Requirements - Adds algorithms that calculate a password's
 actual strength and requires a minimum strength for all passwords.  
Optionally, passwords can be expired after some set amount of time.  
Expired passwords require using an account recovery mechanism.</li>
	<li>Rate Limiting - Adds rate limits for the Generic Login provider to stop bots and other forms of automation.</li>
	<li>reCAPTCHA - Adds reCAPTCHA to stop most bots from registering or attempting to login.</li>
	<li>Remember Me - Adds a set of options that lets the user remember 
their sign in on a specific computer for the amount of time the user 
configures it for.</li>
	<li>Account Recovery via Free SMS - Users with a service that offers a <a href="https://github.com/cubiclesoft/email_sms_mms_gateways">free e-mail to SMS gateway</a> can optionally set up their login to be able to recover access to their account via a SMS text message.</li>
	<li>Terms of Service - Adds a checkbox to the sign up process to 
confirm having read a Terms of Service and/or Privacy Policy statement.</li>
</ul>

<p>Enabling a module adds more options to the configuration and 
immediately activates it, if possible.  All of the modules are highly 
recommended.</p>

<p>The Password Requirements module calculates <a href="http://en.wikipedia.org/wiki/Password_strength">password strength</a>
 and then requires users to meet a minimum strength for each password.  
It can optionally display a set of randomly selected words to the user 
that they can use to more easily construct a password that meets the 
minimum strength threshold.  The following thresholds are recommended:</p>

<ul>
	<li>18 bits of entropy - The average website.</li>
	<li>25 bits of entropy - A popular website with a top 25,000 Alexa ranking.</li>
	<li>30 bits of entropy - A web service with business critical applications (e.g. SAAS).</li>
	<li>40 bits of entropy - A bank or other financial institution.</li>
</ul>

<p>At 18 bits of entropy, approximately 99% of all poorly selected 
passwords are rejected outright and the brute force password cracking 
tools out there become useless hunks of junk.</p>

<p>Passwords in the Generic Login provider are hashed using a <a href="http://en.wikipedia.org/wiki/Bcrypt">bcrypt</a>-like
 hashing mechanism.  Passwords are first salted and then as many rounds 
as possible are executed according to the minimum rules of the Generic 
Login configuration.  If more rounds can be executed in the specified 
time frame, then the password will be that much more secure.  As 
computer hardware gets faster, the number of rounds gets higher, thus 
taking the same amount of time to create the hash for new passwords.</p>

<p>Before moving on, most SSO server users won't want the words "Generic
 Login" to appear but something more familiar such as the website name. 
 The easiest way to change this while making upgrading easy to do is to 
create a language pack that maps the string "Generic Login" to whatever 
is desired.</p>

<h2>SSO Server Providers:  Third-Party/Social Media</h2>

<p>A third-party provider relies on a completely remote system to 
perform account authentication and authorization by redirecting to it.  
The SSO server comes with the following third-party providers:</p>

<ul>
	<li>Facebook - Lets users sign in using their Facebook account.</li>
	<li>Google - Lets users sign in using a Google account.</li>
	<li>LinkedIn - Lets users sign in using their LinkedIn account.</li>
</ul>

<p>A third-party provider generally requires access keys, tokens, etc. 
before it will start functioning properly.  For example, the Facebook 
provider requires setting up a Facebook application at which point 
Facebook will generate an application ID and application secret that 
gets put into the provider.  A well-written provider of this nature will
 include instructions on how to successfully set it up.</p>

<h2>SSO Server Providers:  Enterprise</h2>

<p>An enterprise provider relies on a remote system to perform account 
authentication and authorization by directly connecting to it.  The SSO 
server comes with the following enterprise providers:</p>

<ul>
	<li>LDAP - Lets users sign in using LDAP or Active Directory credentials via a LDAP server.</li>
	<li>Remote Login - Lets users sign in using a remote login mechanism.</li>
</ul>

<p>An enterprise provider generally requires firewall settings to be 
configured to allow the SSO server to have access to the target host and
 the provider has to be configured correctly before it will connect to 
the target host.  Also, setting up such providers can require a level of
 technical expertise that may result in hair-pulling.  For example, the 
LDAP provider requires setting up a rather finicky server URL and 
Distinguished Name.  If the setup isn't perfect, cryptic error messages 
will show up when someone attempts to sign in.</p>

<p>The Remote Login provider is documented in depth later on.  It is an 
incredibly useful tool for signing into an application that relies on a 
public SSO server instance outside a firewall using a private server 
behind a firewall (e.g. via VPN) without opening any ports on the 
corporate firewall.  The private server is responsible for 
authenticating the user (e.g. LDAP or SSPI), pushing the user's 
information to the public SSO server, and then redirecting the browser 
back to the public SSO server, which completes the sign in process.  In 
addition, multiple "remotes" can be set up with the Remote Login 
provider.</p>

<h2>SSO Server API Key Setup</h2>

<div class="float-right first-line shortcode"><div class="image-caption-wrap" style="width: 300px;"><div class="image-caption-image"><img src="Single%20Sign-On%20Server_Client%20Documentation_files/en_us_server_api_key_manager.png" alt="The SSO server API key manager."></div><div class="image-caption-text">The SSO server API key manager.</div></div></div>

<p>After setting up the server configuration and providers as desired, 
it  is time to prepare for the first SSO client installation.  An API 
key  and secret are required for proper operation.  Every SSO client 
should have its own API key.</p>

<p>To create a new API key, select "Manage API Keys" under the "SSO 
Server Options" menu and click "Add API Key".  Fill in the namespace, 
the reason for this key and a URL where an end-user will access the SSO 
system - not where the SSO client will reside but an obvious location 
that uses the client.  Click "Create" and then set up an IP address 
whitelist, field mappings, and tag mappings.  Setting up an IP address 
whitelist of what web server IP addresses can use the API key is highly 
recommended, but the system is generally secure even with the default 
settings.</p>

<p>Now for a brief word on namespaces.  Namespaces allow for seamless 
sign in sharing between API keys.  If a user signs into one application 
(e.g. the SSO client uses API key #1) and then makes their way over to 
another application (e.g. the SSO client for the second application uses
 API key #2), the user would normally have to sign in again.  With 
namespaces, if two API keys share the same namespace, the SSO server 
will see that there is an active session in the namespace already, 
automatically activate the same account, and attempt to automate the 
validation phase of the sign in process.  In theory, the sign in for the
 second application will be completely transparent, behind-the-scenes 
browser redirects.  If the session has expired, the SSO client sent the 
special 'invalid_permissions' message, or the user's IP address has 
changed, the user will have to sign in again.</p>

<p>To avoid confusing users, all SSO client installations using API keys
 in the same namespace should have similar cookie timeout settings.  If 
the cookie timeout settings for a client are not the same, users may 
have to sign in again at weird times and may perceive the system as 
flaky.</p>

<p>A good strategy is to use the following namespaces:</p>

<ul>
	<li>[blank string] - For  access to end-user application(s).  Most API keys will likely use this.</li>
	<li>admin - For administrative interface access.</li>
</ul>

<p>If you wish to isolate each API key into its own namespace, you can 
use the API key's numerical ID.  The API key ID is guaranteed to be 
unique and generated upon creation of the API key.</p>
<p class="float-clear"></p>

<h2 class="float-clear">SSO Client Installation</h2>

<p>Installing the SSO client is similar to <a href="https://barebonescms.com/documentation/install_and_upgrade/">installing Barebones CMS</a>.  The installation procedure is as follows:</p>

<ul>
	<li><a href="https://barebonescms.com/download/">Download the latest SSO Server/Client package</a>.</li>
	<li>Extract the contents and upload everything in the 'client' directory to the destination host - except 'install.php'.</li>
	<li>Write an 'install_hook.php' file restricting access to just your IP
 address and upload it.  See the Barebones CMS installation instructions
  for how to do this.</li>
	<li>Upload 'install.php'.</li>
	<li>Run the installer.</li>
</ul>

<div class="float-right first-line shortcode"><div class="image-caption-wrap" style="width: 300px;"><div class="image-caption-image"><img src="Single%20Sign-On%20Server_Client%20Documentation_files/en_us_client_api_key_setup.png" alt="SSO server API key information."></div><div class="image-caption-text">SSO server API key information.</div></div></div>

<p>During installation, the installer will ask for an endpoint URL, an API key, and an API secret.</p>

<p>All three required bits of information can be obtained by editing an 
API key in the SSO server.  Copy and paste the information from the SSO 
server into the installer.  Be sure to test the settings before 
installing to make sure that everything works properly.</p>

<p>Ideally, there should be one SSO client installation for every single
 application so that only absolutely required information is passed to 
each client.  However, each time a new client is encountered, the user 
will have to log in again, which could get to be rather annoying when 
using several different systems.  Convenience will unfortunately win out
 over security.  A good, balanced approach is to install two clients:  
One for regular end-user activities and one for access to administrative
 interfaces.</p>

<p>A fair bit of warning:  The SSO client has a lot of options and some 
of them are not obvious as to how to set them.  It really depends 
heavily on what you want to do with the software that will utilize the 
client.  Of particular note is the SSO client cookie path, which is 
almost guaranteed to be wrong for your needs - it should point at the 
root of your application, not the root of the SSO client.  But since 
software isn't magical, it has to be pointed at the right location 
manually.  But I didn't want the field to be empty either so that I 
didn't have to write a paragraph of instructions in the installer.</p>

<h2 class="float-clear">Testing the SSO Client</h2>

<p>Once the SSO client has been successfully installed, it is time to 
try it out and make sure everything is in working order.  Create a file 
called 'test_oo.php' wherever the application will reside and copy and 
paste the following code:</p>

<div class="shortcode"><div class="syntaxhighlight-wrap"><div class="syntaxhighlighter collapsed  " id="highlighter_897691"><div class="bar"><div class="toolbar"><a class="item expandSource" style="width: 16px; height: 16px;" title="show source" href="#expandSource">show source</a><a class="item viewSource" style="width: 16px; height: 16px;" title="view source" href="#viewSource">view source</a><div class="item copyToClipboard"><embed id="highlighter_897691_clipboard" type="application/x-shockwave-flash" title="copy to clipboard" allowscriptaccess="always" wmode="transparent" flashvars="highlighterId=highlighter_897691" menu="false" src="Single%20Sign-On%20Server_Client%20Documentation_files/clipboard.swf" height="16" width="16"></div><a class="item printSource" style="width: 16px; height: 16px;" title="print" href="#printSource">print</a><a class="item about" style="width: 16px; height: 16px;" title="?" href="#about">?</a></div></div><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>01</code></td><td class="content"><code class="php-tag">&lt;?php</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>02</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">// These two lines should be executed as soon as possible.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>03</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">require_once</code> <code class="php-string string">"client/config.php"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>04</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">require_once</code> <code class="plain">SSO_CLIENT_ROOT_PATH . </code><code class="php-string string">"/index.php"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>05</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>06</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-variable variable">$sso_client</code> <code class="plain">= </code><code class="php-keyword keyword">new</code> <code class="plain">SSO_Client;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>07</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-variable variable">$sso_client</code><code class="plain">-&gt;</code><code class="php-custfunc functions">Init</code><code class="plain">(</code><code class="php-keyword keyword">array</code><code class="plain">(</code><code class="php-string string">"sso_impersonate"</code><code class="plain">, </code><code class="php-string string">"sso_remote_id"</code><code class="plain">));</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>08</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>09</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">// The rest of this code can be executed whenever.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>10</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-variable variable">$extra</code> <code class="plain">= </code><code class="php-keyword keyword">array</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>11</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(</code><code class="php-function functions">isset</code><code class="plain">(</code><code class="php-variable variable">$_REQUEST</code><code class="plain">[</code><code class="php-string string">"sso_impersonate"</code><code class="plain">]) &amp;&amp; </code><code class="php-function functions">is_string</code><code class="plain">(</code><code class="php-variable variable">$_REQUEST</code><code class="plain">[</code><code class="php-string string">"sso_impersonate"</code><code class="plain">]))&nbsp; </code><code class="php-variable variable">$extra</code><code class="plain">[</code><code class="php-string string">"sso_impersonate"</code><code class="plain">] = </code><code class="php-variable variable">$_REQUEST</code><code class="plain">[</code><code class="php-string string">"sso_impersonate"</code><code class="plain">];</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>12</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">else if</code> <code class="plain">(</code><code class="php-function functions">isset</code><code class="plain">(</code><code class="php-variable variable">$_REQUEST</code><code class="plain">[</code><code class="php-string string">"sso_remote_id"</code><code class="plain">]) &amp;&amp; </code><code class="php-function functions">is_string</code><code class="plain">(</code><code class="php-variable variable">$_REQUEST</code><code class="plain">[</code><code class="php-string string">"sso_remote_id"</code><code class="plain">]))</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>13</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>14</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$extra</code><code class="plain">[</code><code class="php-string string">"sso_provider"</code><code class="plain">] = </code><code class="php-string string">"sso_remote"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>15</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$extra</code><code class="plain">[</code><code class="php-string string">"sso_remote_id"</code><code class="plain">] = </code><code class="php-variable variable">$_REQUEST</code><code class="plain">[</code><code class="php-string string">"sso_remote_id"</code><code class="plain">];</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>16</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>17</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-string string">if (!</code><code class="php-varinstr variable">$sso_client</code><code class="php-string string">-&gt;LoggedIn())&nbsp; </code><code class="php-varinstr variable">$sso_client</code><code class="php-string string">-&gt;Login("</code><code class="php-string string">"</code><code class="plain">, </code><code class="php-string string">"You must login to use this system."</code><code class="plain">, </code><code class="php-variable variable">$extra</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>18</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>19</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(!</code><code class="php-variable variable">$sso_client</code><code class="plain">-&gt;</code><code class="php-custfunc functions">UserLoaded</code><code class="plain">())</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>20</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>21</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// Load local information from the encrypted cookie.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>22</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$username</code> <code class="plain">= </code><code class="php-variable variable">$sso_client</code><code class="plain">-&gt;</code><code class="php-custfunc functions">GetData</code><code class="plain">(</code><code class="php-string string">"u"</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>23</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$firstname</code> <code class="plain">= </code><code class="php-variable variable">$sso_client</code><code class="plain">-&gt;</code><code class="php-custfunc functions">GetData</code><code class="plain">(</code><code class="php-string string">"fn"</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>24</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>25</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// If the cookie data is too long, false will be returned,</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>26</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// so load the official data.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>27</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(</code><code class="php-variable variable">$username</code> <code class="plain">=== </code><code class="php-keyword keyword">false</code> <code class="plain">|| </code><code class="php-variable variable">$firstname</code> <code class="plain">=== </code><code class="php-keyword keyword">false</code><code class="plain">)</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>28</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>29</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(!</code><code class="php-variable variable">$sso_client</code><code class="plain">-&gt;</code><code class="php-custfunc functions">LoadUserInfo</code><code class="plain">())</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>30</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>31</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">echo</code> <code class="php-string string">"Unable to load user information."</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>32</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-function functions">exit</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>33</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>34</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>35</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>36</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>37</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(</code><code class="php-variable variable">$sso_client</code><code class="plain">-&gt;</code><code class="php-custfunc functions">UserLoaded</code><code class="plain">())</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>38</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>39</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// Refresh local information from the SSO server data.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>40</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$username</code> <code class="plain">= </code><code class="php-variable variable">$sso_client</code><code class="plain">-&gt;</code><code class="php-custfunc functions">GetField</code><code class="plain">(</code><code class="php-string string">"username"</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>41</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$firstname</code> <code class="plain">= </code><code class="php-variable variable">$sso_client</code><code class="plain">-&gt;</code><code class="php-custfunc functions">GetField</code><code class="plain">(</code><code class="php-string string">"first_name"</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>42</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>43</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// Save the data for later.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>44</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$sso_client</code><code class="plain">-&gt;</code><code class="php-custfunc functions">SetData</code><code class="plain">(</code><code class="php-string string">"u"</code><code class="plain">, </code><code class="php-variable variable">$username</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>45</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$sso_client</code><code class="plain">-&gt;</code><code class="php-custfunc functions">SetData</code><code class="plain">(</code><code class="php-string string">"fn"</code><code class="plain">, </code><code class="php-variable variable">$firstname</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>46</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>47</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>48</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">// Send the browser cookies.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>49</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-variable variable">$sso_client</code><code class="plain">-&gt;</code><code class="php-custfunc functions">SaveUserInfo</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>50</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>51</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">// Test permissions for the user.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>52</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-string string">if (!</code><code class="php-varinstr variable">$sso_client</code><code class="php-string string">-&gt;IsSiteAdmin())&nbsp; </code><code class="php-varinstr variable">$sso_client</code><code class="php-string string">-&gt;Login("</code><code class="php-string string">"</code><code class="plain">, </code><code class="php-string string">"insufficient_permissions"</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>53</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>54</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">// Get the internal token for use with XSRF defenses.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>55</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">// Not used in this example.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>56</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-variable variable">$bb_usertoken</code> <code class="plain">= </code><code class="php-variable variable">$sso_client</code><code class="plain">-&gt;</code><code class="php-custfunc functions">GetSecretToken</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>57</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>58</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">// A simple example.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>59</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(</code><code class="php-function functions">isset</code><code class="plain">(</code><code class="php-variable variable">$_REQUEST</code><code class="plain">[</code><code class="php-string string">"action"</code><code class="plain">]) &amp;&amp; </code><code class="php-variable variable">$_REQUEST</code><code class="plain">[</code><code class="php-string string">"action"</code><code class="plain">] == </code><code class="php-string string">"logout"</code><code class="plain">)</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>60</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>61</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$sso_client</code><code class="plain">-&gt;</code><code class="php-custfunc functions">Logout</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>62</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>63</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$url</code> <code class="plain">= </code><code class="php-variable variable">$sso_client</code><code class="plain">-&gt;</code><code class="php-custfunc functions">GetFullRequestURLBase</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>64</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>65</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-function functions">header</code><code class="plain">(</code><code class="php-string string">"Location: "</code> <code class="plain">. </code><code class="php-variable variable">$url</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>66</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-function functions">exit</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>67</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>68</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">else</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>69</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>70</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">echo</code> <code class="php-string string">"User ID:&nbsp; "</code> <code class="plain">. </code><code class="php-variable variable">$sso_client</code><code class="plain">-&gt;</code><code class="php-custfunc functions">GetUserID</code><code class="plain">() . </code><code class="php-string string">"&lt;br /&gt;"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>71</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">echo</code> <code class="php-string string">"Username:&nbsp; "</code> <code class="plain">. </code><code class="php-function functions">htmlspecialchars</code><code class="plain">(</code><code class="php-variable variable">$username</code><code class="plain">) . </code><code class="php-string string">"&lt;br /&gt;"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>72</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">echo</code> <code class="php-string string">"First Name:&nbsp; "</code> <code class="plain">. </code><code class="php-function functions">htmlspecialchars</code><code class="plain">(</code><code class="php-variable variable">$firstname</code><code class="plain">) . </code><code class="php-string string">"&lt;br /&gt;"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>73</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">echo</code> <code class="php-string string">"&lt;br /&gt;"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>74</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">echo</code> <code class="php-string string">"&lt;a href=\"test_oo.php\"&gt;Test local access&lt;/a&gt;&lt;br /&gt;"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>75</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">echo</code> <code class="php-string string">"&lt;a href=\"test_oo.php?action=logout\"&gt;Logout&lt;/a&gt;"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>76</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>77</code></td><td class="content"><code class="php-tag">?&gt;</code></td></tr></tbody></table></div></div></div></div></div>

<p>If you would rather use plain functions instead of the class, name 
the  file 'test_flat.php' and copy and paste the following code:</p>

<div class="shortcode"><div class="syntaxhighlight-wrap"><div class="syntaxhighlighter collapsed  " id="highlighter_467644"><div class="bar"><div class="toolbar"><a class="item expandSource" style="width: 16px; height: 16px;" title="show source" href="#expandSource">show source</a><a class="item viewSource" style="width: 16px; height: 16px;" title="view source" href="#viewSource">view source</a><div class="item copyToClipboard"><embed id="highlighter_467644_clipboard" type="application/x-shockwave-flash" title="copy to clipboard" allowscriptaccess="always" wmode="transparent" flashvars="highlighterId=highlighter_467644" menu="false" src="Single%20Sign-On%20Server_Client%20Documentation_files/clipboard.swf" height="16" width="16"></div><a class="item printSource" style="width: 16px; height: 16px;" title="print" href="#printSource">print</a><a class="item about" style="width: 16px; height: 16px;" title="?" href="#about">?</a></div></div><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>01</code></td><td class="content"><code class="php-tag">&lt;?php</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>02</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">// These two lines should be executed as soon as possible.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>03</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-variable variable">$sso_removekeys</code> <code class="plain">= </code><code class="php-keyword keyword">array</code><code class="plain">(</code><code class="php-string string">"sso_impersonate"</code><code class="plain">, </code><code class="php-string string">"sso_remote_id"</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>04</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">require_once</code> <code class="php-string string">"client/config.php"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>05</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">require_once</code> <code class="plain">SSO_CLIENT_ROOT_PATH . </code><code class="php-string string">"/index.php"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>06</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">require_once</code> <code class="plain">SSO_CLIENT_ROOT_PATH . </code><code class="php-string string">"/functions.php"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>07</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>08</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">// The rest of this code can be executed whenever.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>09</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-variable variable">$extra</code> <code class="plain">= </code><code class="php-keyword keyword">array</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>10</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(</code><code class="php-function functions">isset</code><code class="plain">(</code><code class="php-variable variable">$_REQUEST</code><code class="plain">[</code><code class="php-string string">"sso_impersonate"</code><code class="plain">]) &amp;&amp; </code><code class="php-function functions">is_string</code><code class="plain">(</code><code class="php-variable variable">$_REQUEST</code><code class="plain">[</code><code class="php-string string">"sso_impersonate"</code><code class="plain">]))&nbsp; </code><code class="php-variable variable">$extra</code><code class="plain">[</code><code class="php-string string">"sso_impersonate"</code><code class="plain">] = </code><code class="php-variable variable">$_REQUEST</code><code class="plain">[</code><code class="php-string string">"sso_impersonate"</code><code class="plain">];</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>11</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">else if</code> <code class="plain">(</code><code class="php-function functions">isset</code><code class="plain">(</code><code class="php-variable variable">$_REQUEST</code><code class="plain">[</code><code class="php-string string">"sso_remote_id"</code><code class="plain">]) &amp;&amp; </code><code class="php-function functions">is_string</code><code class="plain">(</code><code class="php-variable variable">$_REQUEST</code><code class="plain">[</code><code class="php-string string">"sso_remote_id"</code><code class="plain">]))</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>12</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>13</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$extra</code><code class="plain">[</code><code class="php-string string">"sso_provider"</code><code class="plain">] = </code><code class="php-string string">"sso_remote"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>14</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$extra</code><code class="plain">[</code><code class="php-string string">"sso_remote_id"</code><code class="plain">] = </code><code class="php-variable variable">$_REQUEST</code><code class="plain">[</code><code class="php-string string">"sso_remote_id"</code><code class="plain">];</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>15</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>16</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-string string">if (!SSO_LoggedIn())&nbsp; SSO_Login("</code><code class="php-string string">"</code><code class="plain">, </code><code class="php-string string">"You must login to use this system."</code><code class="plain">, </code><code class="php-variable variable">$extra</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>17</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>18</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(!</code><code class="php-custfunc functions">SSO_UserLoaded</code><code class="plain">())</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>19</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>20</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// Load local information from the encrypted cookie.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>21</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$username</code> <code class="plain">= </code><code class="php-custfunc functions">SSO_GetData</code><code class="plain">(</code><code class="php-string string">"u"</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>22</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$firstname</code> <code class="plain">= </code><code class="php-custfunc functions">SSO_GetData</code><code class="plain">(</code><code class="php-string string">"fn"</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>23</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>24</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// If the cookie data is too long, false will be returned,</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>25</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// so load the official data.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>26</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(</code><code class="php-variable variable">$username</code> <code class="plain">=== </code><code class="php-keyword keyword">false</code> <code class="plain">|| </code><code class="php-variable variable">$firstname</code> <code class="plain">=== </code><code class="php-keyword keyword">false</code><code class="plain">)</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>27</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>28</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(!</code><code class="php-custfunc functions">SSO_LoadUserInfo</code><code class="plain">())</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>29</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>30</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">echo</code> <code class="php-string string">"Unable to load user information."</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>31</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-function functions">exit</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>32</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>33</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>34</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>35</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>36</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(</code><code class="php-custfunc functions">SSO_UserLoaded</code><code class="plain">())</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>37</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>38</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// Refresh local information from the SSO server data.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>39</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$username</code> <code class="plain">= </code><code class="php-custfunc functions">SSO_GetField</code><code class="plain">(</code><code class="php-string string">"username"</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>40</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$firstname</code> <code class="plain">= </code><code class="php-custfunc functions">SSO_GetField</code><code class="plain">(</code><code class="php-string string">"first_name"</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>41</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>42</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// Save the data for later.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>43</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-custfunc functions">SSO_SetData</code><code class="plain">(</code><code class="php-string string">"u"</code><code class="plain">, </code><code class="php-variable variable">$username</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>44</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-custfunc functions">SSO_SetData</code><code class="plain">(</code><code class="php-string string">"fn"</code><code class="plain">, </code><code class="php-variable variable">$firstname</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>45</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>46</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>47</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">// Send the browser cookies.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>48</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-custfunc functions">SSO_SaveUserInfo</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>49</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>50</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">// Test permissions for the user.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>51</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-string string">if (!SSO_IsSiteAdmin())&nbsp; SSO_Login("</code><code class="php-string string">"</code><code class="plain">, </code><code class="php-string string">"insufficient_permissions"</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>52</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>53</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">// Get the internal token for use with XSRF defenses.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>54</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">// Not used in this example.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>55</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-variable variable">$bb_usertoken</code> <code class="plain">= </code><code class="php-custfunc functions">SSO_GetSecretToken</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>56</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>57</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">// A simple example.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>58</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(</code><code class="php-function functions">isset</code><code class="plain">(</code><code class="php-variable variable">$_REQUEST</code><code class="plain">[</code><code class="php-string string">"action"</code><code class="plain">]) &amp;&amp; </code><code class="php-variable variable">$_REQUEST</code><code class="plain">[</code><code class="php-string string">"action"</code><code class="plain">] == </code><code class="php-string string">"logout"</code><code class="plain">)</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>59</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>60</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-custfunc functions">SSO_Logout</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>61</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>62</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$url</code> <code class="plain">= </code><code class="php-custfunc functions">SSO_GetFullRequestURLBase</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>63</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>64</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-function functions">header</code><code class="plain">(</code><code class="php-string string">"Location: "</code> <code class="plain">. </code><code class="php-variable variable">$url</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>65</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-function functions">exit</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>66</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>67</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">else</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>68</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>69</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">echo</code> <code class="php-string string">"User ID:&nbsp; "</code> <code class="plain">. </code><code class="php-custfunc functions">SSO_GetUserID</code><code class="plain">() . </code><code class="php-string string">"&lt;br /&gt;"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>70</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">echo</code> <code class="php-string string">"Username:&nbsp; "</code> <code class="plain">. </code><code class="php-function functions">htmlspecialchars</code><code class="plain">(</code><code class="php-variable variable">$username</code><code class="plain">) . </code><code class="php-string string">"&lt;br /&gt;"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>71</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">echo</code> <code class="php-string string">"First Name:&nbsp; "</code> <code class="plain">. </code><code class="php-function functions">htmlspecialchars</code><code class="plain">(</code><code class="php-variable variable">$firstname</code><code class="plain">) . </code><code class="php-string string">"&lt;br /&gt;"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>72</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">echo</code> <code class="php-string string">"&lt;br /&gt;"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>73</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">echo</code> <code class="php-string string">"&lt;a href=\"test_flat.php\"&gt;Test local access&lt;/a&gt;&lt;br /&gt;"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>74</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">echo</code> <code class="php-string string">"&lt;a href=\"test_flat.php?action=logout\"&gt;Logout&lt;/a&gt;"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>75</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>76</code></td><td class="content"><code class="php-tag">?&gt;</code></td></tr></tbody></table></div></div></div></div></div>

<p>Change the highlighted line with 'config.php' to point at the 
'config.php' in the SSO client directory. The first few lines should be 
executed as soon as is possible in an application so the SSO client has 
the best chance of operating transparently to the application 
(especially true when implementing this as a third-party software 
plugin).</p>

<p>This example uses all sorts of features of the SSO client.  
Specifically, extensive use of cookie caching to minimize the number of 
requests to the SSO server for user information.  At any rate, go ahead 
and visit the 'test_oo.php' or 'test_flat.php' page.</p>

<div class="center-align shortcode"><div class="image-caption-wrap" style="width: 279px;"><div class="image-caption-image"><img src="Single%20Sign-On%20Server_Client%20Documentation_files/en_us_server_ugly_login.png" alt="Initial sign in is ugly."></div><div class="image-caption-text">Initial sign in is ugly.</div></div></div>

<p>If everything is successful and at least one provider is configured 
correctly, you will be rewarded with an ugly-looking sign in screen.</p>

<h2>Build a Custom Header and Footer</h2>

<p>But don't fear!  For the ugliness can be remedied with a little HTML 
and CSS.  Fortunately, in the 'examples' directory included with the SSO
 server is a very nice-looking, modern layout.  You don't have to use 
it, but it will save some time.  The only part you actually have to 
build is a header and footer.</p>

<div class="center-align shortcode"><div class="image-caption-wrap" style="width: 637px;"><div class="image-caption-image"><img src="Single%20Sign-On%20Server_Client%20Documentation_files/en_us_server_good_lookin_login.png" alt="The new hotness."></div><div class="image-caption-text">The new hotness.</div></div></div>

<p>Simply create 'header.php' and 'footer.php' in the SSO server's main 
directory and write a standard header and footer.  Then link to the 
'examples/main.css' file in the header as one does with a CSS file 
and...voilà!  The result is a really, really ridiculously good-looking 
interface.</p>

<p>The header and footer files are loaded very early on and stored into 
$sso_header and $sso_footer variables in the SSO server frontend to 
accommodate early error messages that might arise (e.g. database 
connection failures).  This makes major customizations a bit difficult. 
 There are two functions that can be created which can be placed either 
in 'header.php' or 'footer.php' that allow $sso_header and $sso_footer 
to be completely or partially replaced with something else after the 
user's session information is loaded up but before any actions are 
processed:</p>

<ul>
	<li>FrontendHook_PreHeaderMessage() - Called before $sso_header is modified with 'initmsg' data.</li>
	<li>FrontendHook_PostHeaderMessage() - Called after 'initmsg' data has been appended to $sso_header.</li>
</ul>

<p>The recommended approach is to use a single header and footer so 
users aren't confused as to which sign in they need to use and which 
login information to provide.</p>

<h2>Create a Site Admin Account</h2>

<p>The next step is to create an account that will have access to the 
SSO server admin.  Right now, the admin is only accessible because 
'admin_hook.php' is granting access but it still needs to be secured.  
This is the next step of that whole process.</p>

<p>Creating a valid account is easy:  Just go through the motions of 
successfully signing in and returning to the test page.  Be sure to use a
 secure password.  If you are using the example test page, you will be 
kicked back to the login screen with the message, "Your account has 
insufficient permissions to access that resource."</p>

<p>Switch over to the SSO server admin and use "Find User" to locate the
 account.  Add the 'sso_site_admin' tag to the account.  Switch back to 
the login screen and sign in again.  Logging in should now succeed.</p>

<h2>Understanding Field Flow</h2>

<p>Understanding how user account field information flows from and 
through the SSO server to the SSO client is critical to making sure each
 application gets the information it needs to operate correctly.</p>

<div class="center-align shortcode"><div class="image-caption-wrap" style="width: 566px;"><div class="image-caption-image"><img src="Single%20Sign-On%20Server_Client%20Documentation_files/en_us_server_field_flowchart.png" alt="Flowchart of how field data flows through."></div><div class="image-caption-text">Flowchart of how field data flows through.</div></div></div>

<p>Providers supply some field information.  When a SSO server provider 
supplies a field, it also protects that information from being modified.
  For instance, the Generic Login provider passes an e-mail address and 
username onto the SSO server and also protects those fields from 
modification at the user account level.  This is because the next time 
the user would log in, the provider will overwrite the value for each 
field in the user account.  It is up to the provider to make it possible
 to change the associated fields that it protects if it is possible to 
do so.</p>

<p>The other source of field information is user-supplied.  There are two ways to set user-supplied information:</p>

<ul>
	<li>From the SSO server.  Upon signing in but before returning to the 
SSO client, an 'index_hook.php' file can be constructed to ask users to 
fill in missing information that the client requires.</li>
	<li>From a SSO client.  If the API key supports "Read/Write" 
permissions on a specific field, the SSO client can remotely push 
changes to the user account.</li>
</ul>

<p>These two sets of information form the entire user account.  This 
information is transformed by the SSO server endpoint when a client 
connects with a specific API key.  The API key determines what fields 
and tags flow through from the server to the client and what the target 
field names will be.  Each API key restricts what fields and tags flow 
through by the mapping for each field and tag.  If there is no mapping, 
the field/tag will not be sent.  If there is a mapping, the field/tag 
will be sent.</p>

<p>The application can retrieve a field's value with the SSO_GetField() 
function and if the user has a specific tag with the SSO_HasTag() 
function.</p>

<p>If you logged into the system with the test page using the Generic 
Login provider, there will likely be no information for the Username and
 First Name fields.  This happens because there is either no information
 or the mapping for the API key is incorrect.  Feel free to experiment a
 bit.</p>

<h2>Using Versioned Accounts</h2>

<p>One of the nice features of the SSO server is that each user account 
has a version number associated with it.  Every account starts at 
version zero (0) and it is entirely up to you to decide how you want to 
deal with version numbers.  Checking the version of an account and doing
 something based on the current value is done by creating an 
'index_hook.php' file.  Here is a non-working example of a possible 
'index_hook.php' implementation:</p>

<div class="shortcode"><div class="syntaxhighlight-wrap"><div class="syntaxhighlighter collapsed  " id="highlighter_384204"><div class="bar"><div class="toolbar"><a class="item expandSource" style="width: 16px; height: 16px;" title="show source" href="#expandSource">show source</a><a class="item viewSource" style="width: 16px; height: 16px;" title="view source" href="#viewSource">view source</a><div class="item copyToClipboard"><embed id="highlighter_384204_clipboard" type="application/x-shockwave-flash" title="copy to clipboard" allowscriptaccess="always" wmode="transparent" flashvars="highlighterId=highlighter_384204" menu="false" src="Single%20Sign-On%20Server_Client%20Documentation_files/clipboard.swf" height="16" width="16"></div><a class="item printSource" style="width: 16px; height: 16px;" title="print" href="#printSource">print</a><a class="item about" style="width: 16px; height: 16px;" title="?" href="#about">?</a></div></div><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>01</code></td><td class="content"><code class="php-tag">&lt;?php</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>02</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// An example index hook for the SSO server.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>03</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// (C) 2012 CubicleSoft</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>04</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>05</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(!</code><code class="php-function functions">defined</code><code class="plain">(</code><code class="php-string string">"SSO_FILE"</code><code class="plain">))&nbsp; </code><code class="php-function functions">exit</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>06</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>07</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$versions</code> <code class="plain">= </code><code class="php-keyword keyword">array</code><code class="plain">(</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>08</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-string string">"legal"</code> <code class="plain">=&gt; </code><code class="php-numval">4</code><code class="plain">,</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>09</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-string string">"marketing_ads"</code> <code class="plain">=&gt; </code><code class="php-numval">6</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>10</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>11</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$latestversion</code> <code class="plain">= </code><code class="php-function functions">max</code><code class="plain">(</code><code class="php-variable variable">$versions</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>12</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(</code><code class="php-variable variable">$sso_userrow</code><code class="plain">-&gt;version == </code><code class="php-numval">0</code><code class="plain">)</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>13</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>14</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// Awesome.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>15</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(</code><code class="php-custfunc functions">SSO_FrontendFieldValue</code><code class="plain">(</code><code class="php-string string">"submit"</code><code class="plain">) !== </code><code class="php-keyword keyword">false</code><code class="plain">)</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>16</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>17</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// Process form submission.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>18</code></td><td class="content"><code class="php-comment comments">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $sso_user_info["first_name"] = "Colonel";</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>19</code></td><td class="content"><code class="php-comment comments">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $sso_user_info["last_name"] = "Sanders";</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>20</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>21</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// Save changes.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>22</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-custfunc functions">SSO_SetUserVersion</code><code class="plain">(</code><code class="php-variable variable">$latestversion</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>23</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>24</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-function functions">header</code><code class="plain">(</code><code class="php-string string">"Location: "</code> <code class="plain">. </code><code class="php-variable variable">$sso_target_url</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>25</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-function functions">exit</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>26</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>27</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>28</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">echo</code> <code class="php-string string">"New account!&nbsp; You rock!"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>29</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>30</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">else if</code> <code class="plain">(</code><code class="php-variable variable">$sso_userrow</code><code class="plain">-&gt;version &lt; </code><code class="php-variable variable">$versions</code><code class="plain">[</code><code class="php-string string">"legal"</code><code class="plain">])</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>31</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>32</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// Legal sent this down the other day.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>33</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">echo</code> <code class="php-string string">"New Terms of Service and Privacy Policy - BORING!"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>34</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>35</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">else if</code> <code class="plain">(</code><code class="php-variable variable">$sso_userrow</code><code class="plain">-&gt;version &lt; </code><code class="php-variable variable">$versions</code><code class="plain">[</code><code class="php-string string">"marketing_ads"</code><code class="plain">])</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>36</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>37</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// Because we want our users to give us their money.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>38</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">echo</code> <code class="php-string string">"Latest promotion/advertisement/feature!&nbsp; Slobbery hugs and kisses!"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>39</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>40</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">else</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>41</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>42</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// Automate some fields here.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>43</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$changed</code> <code class="plain">= </code><code class="php-keyword keyword">false</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>44</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>45</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// ...</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>46</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>47</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// Save changes.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>48</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(</code><code class="php-variable variable">$changed</code><code class="plain">)</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>49</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>50</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-custfunc functions">SSO_SetUserVersion</code><code class="plain">(</code><code class="php-variable variable">$latestversion</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>51</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>52</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-function functions">header</code><code class="plain">(</code><code class="php-string string">"Location: "</code> <code class="plain">. </code><code class="php-variable variable">$sso_target_url</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>53</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-function functions">exit</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>54</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>55</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>56</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(</code><code class="php-function functions">count</code><code class="plain">(</code><code class="php-variable variable">$sso_missingfields</code><code class="plain">))</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>57</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>58</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// Have the user fill in the remaining missing fields.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>59</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(</code><code class="php-custfunc functions">SSO_FrontendFieldValue</code><code class="plain">(</code><code class="php-string string">"submit"</code><code class="plain">) !== </code><code class="php-keyword keyword">false</code><code class="plain">)</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>60</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>61</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// Process form submission.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>62</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>63</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// Save changes.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>64</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-custfunc functions">SSO_SetUserVersion</code><code class="plain">(</code><code class="php-variable variable">$latestversion</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>65</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>66</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-function functions">header</code><code class="plain">(</code><code class="php-string string">"Location: "</code> <code class="plain">. </code><code class="php-variable variable">$sso_target_url</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>67</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-function functions">exit</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>68</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>69</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>70</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// Display form here.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>71</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">echo</code> <code class="php-string string">"Need some additional information to continue.&nbsp; Sell your soul (or privacy) here."</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>72</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>73</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">else</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>74</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>75</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-custfunc functions">SSO_ValidateUser</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>76</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>77</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-custfunc functions">SSO_DisplayError</code><code class="plain">(</code><code class="php-string string">"Error:&nbsp; Unable to validate the new session.&nbsp; Most likely cause:&nbsp; Internal error."</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>78</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>79</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>80</code></td><td class="content"><code class="php-tag">?&gt;</code></td></tr></tbody></table></div></div></div></div></div>

<p>The code starts off with checking to see if this is a brand new 
account.  This is where you might offer the user the option to sign up 
for a newsletter or agree to your terms of service or whatever else you 
might dream of.  When they submit the form (not shown), it sets the user
 version to the latest version, redirects back to itself, and then moves
 along to the latest version tasks.</p>

<p>If the user account is not on the latest version, the code checks to 
see what the user needs to see or do first.  In this case, 'legal' 
issues come first, then 'marketing and advertising' initiatives.  The 
user only sees one or the other but not both during the same login 
attempt.</p>

<p>Finally, the code checks to see which fields are being sent to the 
client that are empty and aren't protected by the associated provider.  
First, it tries to automatically fill in the missing fields.  If it 
fails to do that, the user gets to fill the fields in.  Once everything 
looks okay, SSO_ValidateUser() is called, which finalizes the session 
and returns to the SSO client.</p>

<p>And now for a working implementation from this website:</p>

<div class="shortcode"><div class="syntaxhighlight-wrap"><div class="syntaxhighlighter collapsed  htmlscript" id="highlighter_260116"><div class="bar"><div class="toolbar"><a class="item expandSource" style="width: 16px; height: 16px;" title="show source" href="#expandSource">show source</a><a class="item viewSource" style="width: 16px; height: 16px;" title="view source" href="#viewSource">view source</a><div class="item copyToClipboard"><embed id="highlighter_260116_clipboard" type="application/x-shockwave-flash" title="copy to clipboard" allowscriptaccess="always" wmode="transparent" flashvars="highlighterId=highlighter_260116" menu="false" src="Single%20Sign-On%20Server_Client%20Documentation_files/clipboard.swf" height="16" width="16"></div><a class="item printSource" style="width: 16px; height: 16px;" title="print" href="#printSource">print</a><a class="item about" style="width: 16px; height: 16px;" title="?" href="#about">?</a></div></div><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>001</code></td><td class="content"><code class="htmlscript script">&lt;?php</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>002</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript php-comment comments">// Barebones CMS website index hook.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>003</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript php-comment comments">// (C) 2012 CubicleSoft</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>004</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>005</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript php-keyword keyword">if</code> <code class="htmlscript plain">(!</code><code class="htmlscript php-function functions">defined</code><code class="htmlscript plain">(</code><code class="htmlscript php-string string">"SSO_FILE"</code><code class="htmlscript plain">))&nbsp; </code><code class="htmlscript php-function functions">exit</code><code class="htmlscript plain">();</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>006</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>007</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript php-string string">foreach (</code><code class="htmlscript php-varinstr variable">$sso_missingfields</code> <code class="htmlscript php-string string">as </code><code class="htmlscript php-varinstr variable">$field</code><code class="htmlscript php-string string">)&nbsp; </code><code class="htmlscript php-varinstr variable">$sso_user_info</code><code class="htmlscript php-string string">[</code><code class="htmlscript php-varinstr variable">$field</code><code class="htmlscript php-string string">] = "</code><code class="htmlscript php-string string">"</code><code class="htmlscript plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>008</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>009</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript php-variable variable">$knownfields</code> <code class="htmlscript plain">= </code><code class="htmlscript string">array</code><code class="htmlscript plain">(</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>010</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-string string">"email"</code> <code class="htmlscript plain">=&gt; </code><code class="htmlscript php-string string">"E-mail Address"</code><code class="htmlscript plain">,</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>011</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-string string">"username"</code> <code class="htmlscript plain">=&gt; </code><code class="htmlscript php-string string">"Username"</code><code class="htmlscript plain">,</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>012</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-string string">"first_name"</code> <code class="htmlscript plain">=&gt; </code><code class="htmlscript php-string string">"First Name"</code><code class="htmlscript plain">,</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>013</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-string string">"last_name"</code> <code class="htmlscript plain">=&gt; </code><code class="htmlscript php-string string">"Last Name"</code><code class="htmlscript plain">,</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>014</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-string string">"</code><code class="htmlscript plain">mybb_usertitle</code><code class="htmlscript php-string string">" =&gt; "</code><code class="htmlscript php-string string">"</code><code class="htmlscript plain">,</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>015</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-string string">"</code><code class="htmlscript plain">mybb_gid</code><code class="htmlscript php-string string">" =&gt; "</code><code class="htmlscript php-string string">"</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>016</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>017</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>018</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript php-keyword keyword">foreach</code> <code class="htmlscript plain">(</code><code class="htmlscript php-variable variable">$sso_apikey_info</code><code class="htmlscript plain">[</code><code class="htmlscript php-string string">"field_map"</code><code class="htmlscript plain">] </code><code class="htmlscript php-keyword keyword">as</code> <code class="htmlscript php-variable variable">$key</code> <code class="htmlscript plain">=&gt; </code><code class="htmlscript php-variable variable">$info</code><code class="htmlscript plain">)</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>019</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>020</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-keyword keyword">if</code> <code class="htmlscript plain">(!</code><code class="htmlscript php-function functions">isset</code><code class="htmlscript plain">(</code><code class="htmlscript php-variable variable">$knownfields</code><code class="htmlscript plain">[</code><code class="htmlscript php-variable variable">$key</code><code class="htmlscript plain">]))</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>021</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>022</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-keyword keyword">echo</code> <code class="htmlscript php-function functions">htmlspecialchars</code><code class="htmlscript plain">(</code><code class="htmlscript php-custfunc functions">BB_Translate</code><code class="htmlscript plain">(</code><code class="htmlscript php-string string">"Unknown required user field '%s'.&nbsp; Someone broke this system.&nbsp; Oops!"</code><code class="htmlscript plain">, </code><code class="htmlscript php-variable variable">$key</code><code class="htmlscript plain">));</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>023</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-function functions">exit</code><code class="htmlscript plain">();</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>024</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>025</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>026</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>027</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript php-comment comments">// Add miscellaneous protected fields.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>028</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript php-variable variable">$protectedfields</code> <code class="htmlscript plain">= </code><code class="htmlscript php-keyword keyword">array</code><code class="htmlscript plain">(</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>029</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-string string">"mybb_usertitle"</code><code class="htmlscript plain">, </code><code class="htmlscript php-string string">"mybb_gid"</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>030</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>031</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript php-keyword keyword">foreach</code> <code class="htmlscript plain">(</code><code class="htmlscript php-variable variable">$protectedfields</code> <code class="htmlscript php-keyword keyword">as</code> <code class="htmlscript php-variable variable">$key</code><code class="htmlscript plain">)&nbsp; </code><code class="htmlscript php-variable variable">$sso_protectedfields</code><code class="htmlscript plain">[</code><code class="htmlscript php-variable variable">$key</code><code class="htmlscript plain">] = </code><code class="htmlscript php-keyword keyword">true</code><code class="htmlscript plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>032</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>033</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript php-comment comments">// Check for editable fields.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>034</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript php-variable variable">$found</code> <code class="htmlscript plain">= </code><code class="htmlscript php-keyword keyword">false</code><code class="htmlscript plain">;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>035</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript php-keyword keyword">foreach</code> <code class="htmlscript plain">(</code><code class="htmlscript php-variable variable">$knownfields</code> <code class="htmlscript php-keyword keyword">as</code> <code class="htmlscript php-variable variable">$key</code> <code class="htmlscript plain">=&gt; </code><code class="htmlscript php-variable variable">$disp</code><code class="htmlscript plain">)</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>036</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>037</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-string string">if ((!isset(</code><code class="htmlscript php-varinstr variable">$sso_protectedfields</code><code class="htmlscript php-string string">[</code><code class="htmlscript php-varinstr variable">$key</code><code class="htmlscript php-string string">]) || !</code><code class="htmlscript php-varinstr variable">$sso_protectedfields</code><code class="htmlscript php-string string">[</code><code class="htmlscript php-varinstr variable">$key</code><code class="htmlscript php-string string">]) &amp;&amp; ((isset(</code><code class="htmlscript php-varinstr variable">$sso_user_info</code><code class="htmlscript php-string string">[</code><code class="htmlscript php-varinstr variable">$key</code><code class="htmlscript php-string string">]) &amp;&amp; </code><code class="htmlscript php-varinstr variable">$sso_user_info</code><code class="htmlscript php-string string">[</code><code class="htmlscript php-varinstr variable">$key</code><code class="htmlscript php-string string">] != "</code><code class="htmlscript php-string string">"</code><code class="htmlscript plain">) || </code><code class="htmlscript php-function functions">isset</code><code class="htmlscript plain">(</code><code class="htmlscript php-variable variable">$sso_apikey_info</code><code class="htmlscript plain">[</code><code class="htmlscript php-string string">"field_map"</code><code class="htmlscript plain">][</code><code class="htmlscript php-variable variable">$key</code><code class="htmlscript plain">])))</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>038</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>039</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-string string">if (!</code><code class="htmlscript php-varinstr variable">$sso_automate</code> <code class="htmlscript php-string string">|| !isset(</code><code class="htmlscript php-varinstr variable">$sso_user_info</code><code class="htmlscript php-string string">[</code><code class="htmlscript php-varinstr variable">$key</code><code class="htmlscript php-string string">]) || </code><code class="htmlscript php-varinstr variable">$sso_user_info</code><code class="htmlscript php-string string">[</code><code class="htmlscript php-varinstr variable">$key</code><code class="htmlscript php-string string">] == "</code><code class="htmlscript php-string string">"</code><code class="htmlscript plain">)&nbsp; </code><code class="htmlscript php-variable variable">$found</code> <code class="htmlscript plain">= </code><code class="htmlscript php-keyword keyword">true</code><code class="htmlscript plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>040</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>041</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-keyword keyword">break</code><code class="htmlscript plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>042</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>043</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>044</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>045</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript php-comment comments">// Skip the verification if there are no editable fields.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>046</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript php-keyword keyword">if</code> <code class="htmlscript plain">(!</code><code class="htmlscript php-variable variable">$found</code><code class="htmlscript plain">)</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>047</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>048</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-custfunc functions">SSO_ValidateUser</code><code class="htmlscript plain">();</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>049</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>050</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-custfunc functions">SSO_DisplayError</code><code class="htmlscript plain">(</code><code class="htmlscript php-string string">"Error:&nbsp; Unable to validate the new session.&nbsp; Most likely cause:&nbsp; Internal error."</code><code class="htmlscript plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>051</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>052</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>053</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript php-variable variable">$messages</code> <code class="htmlscript plain">= </code><code class="htmlscript php-keyword keyword">array</code><code class="htmlscript plain">();</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>054</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>055</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript php-comment comments">// Process form submission.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>056</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript php-keyword keyword">if</code> <code class="htmlscript plain">(</code><code class="htmlscript php-custfunc functions">SSO_FrontendFieldValue</code><code class="htmlscript plain">(</code><code class="htmlscript php-string string">"submit"</code><code class="htmlscript plain">) !== </code><code class="htmlscript php-keyword keyword">false</code><code class="htmlscript plain">)</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>057</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>058</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-keyword keyword">foreach</code> <code class="htmlscript plain">(</code><code class="htmlscript php-variable variable">$knownfields</code> <code class="htmlscript php-keyword keyword">as</code> <code class="htmlscript php-variable variable">$key</code> <code class="htmlscript plain">=&gt; </code><code class="htmlscript php-variable variable">$disp</code><code class="htmlscript plain">)</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>059</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>060</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-string string">if ((!isset(</code><code class="htmlscript php-varinstr variable">$sso_protectedfields</code><code class="htmlscript php-string string">[</code><code class="htmlscript php-varinstr variable">$key</code><code class="htmlscript php-string string">]) || !</code><code class="htmlscript php-varinstr variable">$sso_protectedfields</code><code class="htmlscript php-string string">[</code><code class="htmlscript php-varinstr variable">$key</code><code class="htmlscript php-string string">]) &amp;&amp; ((isset(</code><code class="htmlscript php-varinstr variable">$sso_user_info</code><code class="htmlscript php-string string">[</code><code class="htmlscript php-varinstr variable">$key</code><code class="htmlscript php-string string">]) &amp;&amp; </code><code class="htmlscript php-varinstr variable">$sso_user_info</code><code class="htmlscript php-string string">[</code><code class="htmlscript php-varinstr variable">$key</code><code class="htmlscript php-string string">] != "</code><code class="htmlscript php-string string">"</code><code class="htmlscript plain">) || </code><code class="htmlscript php-function functions">isset</code><code class="htmlscript plain">(</code><code class="htmlscript php-variable variable">$sso_apikey_info</code><code class="htmlscript plain">[</code><code class="htmlscript php-string string">"field_map"</code><code class="htmlscript plain">][</code><code class="htmlscript php-variable variable">$key</code><code class="htmlscript plain">])))</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>061</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>062</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-varinstr variable">$sso_user_info</code><code class="htmlscript php-string string">[</code><code class="htmlscript php-varinstr variable">$key</code><code class="htmlscript php-string string">] = SSO_FrontendFieldValue(</code><code class="htmlscript php-varinstr variable">$key</code><code class="htmlscript php-string string">, "</code><code class="htmlscript php-string string">"</code><code class="htmlscript plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>063</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-string string">if (</code><code class="htmlscript php-varinstr variable">$sso_user_info</code><code class="htmlscript php-string string">[</code><code class="htmlscript php-varinstr variable">$key</code><code class="htmlscript php-string string">] == "</code><code class="htmlscript php-string string">"</code><code class="htmlscript plain">)&nbsp; </code><code class="htmlscript php-variable variable">$messages</code><code class="htmlscript plain">[] = </code><code class="htmlscript php-custfunc functions">BB_Translate</code><code class="htmlscript plain">(</code><code class="htmlscript php-string string">"Fill in '%s'."</code><code class="htmlscript plain">, </code><code class="htmlscript php-custfunc functions">BB_Translate</code><code class="htmlscript plain">(</code><code class="htmlscript php-variable variable">$disp</code><code class="htmlscript plain">));</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>064</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>065</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>066</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>067</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-keyword keyword">if</code> <code class="htmlscript plain">(!</code><code class="htmlscript php-function functions">count</code><code class="htmlscript plain">(</code><code class="htmlscript php-variable variable">$messages</code><code class="htmlscript plain">))</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>068</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>069</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-comment comments">// Save changes.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>070</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-custfunc functions">SSO_SetUserVersion</code><code class="htmlscript plain">(</code><code class="htmlscript php-numval">0</code><code class="htmlscript plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>071</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>072</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-comment comments">// Proceed.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>073</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-custfunc functions">SSO_ValidateUser</code><code class="htmlscript plain">();</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>074</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>075</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-custfunc functions">SSO_DisplayError</code><code class="htmlscript plain">(</code><code class="htmlscript php-string string">"Error:&nbsp; Unable to validate the new session.&nbsp; Most likely cause:&nbsp; Internal error."</code><code class="htmlscript plain">);</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>076</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>077</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>078</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>079</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript php-keyword keyword">echo</code> <code class="htmlscript php-variable variable">$sso_header</code><code class="htmlscript plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>080</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>081</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript php-custfunc functions">SSO_OutputHeartbeat</code><code class="htmlscript plain">();</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>082</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>083</code></td><td class="content"><code class="htmlscript script">?&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>084</code></td><td class="content"><code class="htmlscript plain">&lt;</code><code class="htmlscript keyword">div</code> <code class="htmlscript color1">class</code><code class="htmlscript plain">=</code><code class="htmlscript string">"sso_main_wrap"</code><code class="htmlscript plain">&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>085</code></td><td class="content"><code class="htmlscript plain">&lt;</code><code class="htmlscript keyword">div</code> <code class="htmlscript color1">class</code><code class="htmlscript plain">=</code><code class="htmlscript string">"sso_main_wrap_inner"</code><code class="htmlscript plain">&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>086</code></td><td class="content"><code class="htmlscript script">&lt;?php</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>087</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript php-keyword keyword">if</code> <code class="htmlscript plain">(</code><code class="htmlscript php-function functions">count</code><code class="htmlscript plain">(</code><code class="htmlscript php-variable variable">$messages</code><code class="htmlscript plain">))</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>088</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>089</code></td><td class="content"><code class="htmlscript script">?&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>090</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;</code><code class="htmlscript keyword">div</code> <code class="htmlscript color1">class</code><code class="htmlscript plain">=</code><code class="htmlscript string">"sso_main_messages_wrap"</code><code class="htmlscript plain">&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>091</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;</code><code class="htmlscript keyword">div</code> <code class="htmlscript color1">class</code><code class="htmlscript plain">=</code><code class="htmlscript string">"sso_main_messages_header"</code><code class="htmlscript plain">&gt;</code><code class="htmlscript script">&lt;?php</code> <code class="htmlscript php-keyword keyword">echo</code> <code class="htmlscript php-function functions">htmlspecialchars</code><code class="htmlscript plain">(</code><code class="htmlscript php-custfunc functions">BB_Translate</code><code class="htmlscript plain">(</code><code class="htmlscript php-function functions">count</code><code class="htmlscript plain">(</code><code class="htmlscript php-variable variable">$messages</code><code class="htmlscript plain">) == </code><code class="htmlscript php-numval">1</code> <code class="htmlscript plain">? </code><code class="htmlscript php-string string">"Please correct the following problem:"</code> <code class="htmlscript plain">: </code><code class="htmlscript php-string string">"Please correct the following problems:"</code><code class="htmlscript plain">)); </code><code class="htmlscript script">?&gt;</code><code class="htmlscript plain">&lt;/</code><code class="htmlscript keyword">div</code><code class="htmlscript plain">&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>092</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;</code><code class="htmlscript keyword">div</code> <code class="htmlscript color1">class</code><code class="htmlscript plain">=</code><code class="htmlscript string">"sso_main_messages"</code><code class="htmlscript plain">&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>093</code></td><td class="content"><code class="htmlscript script">&lt;?php</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>094</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-keyword keyword">foreach</code> <code class="htmlscript plain">(</code><code class="htmlscript php-variable variable">$messages</code> <code class="htmlscript php-keyword keyword">as</code> <code class="htmlscript php-variable variable">$message</code><code class="htmlscript plain">)</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>095</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>096</code></td><td class="content"><code class="htmlscript script">?&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>097</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;</code><code class="htmlscript keyword">div</code> <code class="htmlscript color1">class</code><code class="htmlscript plain">=</code><code class="htmlscript string">"sso_main_messageerror"</code><code class="htmlscript plain">&gt;</code><code class="htmlscript script">&lt;?php</code> <code class="htmlscript php-keyword keyword">echo</code> <code class="htmlscript php-function functions">htmlspecialchars</code><code class="htmlscript plain">(</code><code class="htmlscript php-variable variable">$message</code><code class="htmlscript plain">); </code><code class="htmlscript script">?&gt;</code><code class="htmlscript plain">&lt;/</code><code class="htmlscript keyword">div</code><code class="htmlscript plain">&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>098</code></td><td class="content"><code class="htmlscript script">&lt;?php</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>099</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>100</code></td><td class="content"><code class="htmlscript script">?&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>101</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;/</code><code class="htmlscript keyword">div</code><code class="htmlscript plain">&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>102</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;/</code><code class="htmlscript keyword">div</code><code class="htmlscript plain">&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>103</code></td><td class="content"><code class="htmlscript script">&lt;?php</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>104</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>105</code></td><td class="content"><code class="htmlscript script">?&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>106</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;</code><code class="htmlscript keyword">div</code> <code class="htmlscript color1">class</code><code class="htmlscript plain">=</code><code class="htmlscript string">"sso_main_form_wrap sso_login_signup_form"</code><code class="htmlscript plain">&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>107</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;</code><code class="htmlscript keyword">div</code> <code class="htmlscript color1">class</code><code class="htmlscript plain">=</code><code class="htmlscript string">"sso_main_form_header"</code><code class="htmlscript plain">&gt;</code><code class="htmlscript script">&lt;?php</code> <code class="htmlscript php-keyword keyword">echo</code> <code class="htmlscript php-function functions">htmlspecialchars</code><code class="htmlscript plain">(</code><code class="htmlscript php-custfunc functions">BB_Translate</code><code class="htmlscript plain">(</code><code class="htmlscript php-string string">"Verify Information"</code><code class="htmlscript plain">)); </code><code class="htmlscript script">?&gt;</code><code class="htmlscript plain">&lt;/</code><code class="htmlscript keyword">div</code><code class="htmlscript plain">&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>108</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;</code><code class="htmlscript keyword">form</code> <code class="htmlscript color1">class</code><code class="htmlscript plain">=</code><code class="htmlscript string">"sso_main_form"</code> <code class="htmlscript color1">name</code><code class="htmlscript plain">=</code><code class="htmlscript string">"sso_main_form"</code> <code class="htmlscript color1">method</code><code class="htmlscript plain">=</code><code class="htmlscript string">"post"</code> <code class="htmlscript color1">accept-charset</code><code class="htmlscript plain">=</code><code class="htmlscript string">"UTF-8"</code> <code class="htmlscript color1">enctype</code><code class="htmlscript plain">=</code><code class="htmlscript string">"multipart/form-data"</code> <code class="htmlscript plain">action="</code><code class="htmlscript script">&lt;?php</code> <code class="htmlscript php-keyword keyword">echo</code> <code class="htmlscript php-function functions">htmlspecialchars</code><code class="htmlscript plain">(</code><code class="htmlscript php-variable variable">$sso_target_url</code><code class="htmlscript plain">); </code><code class="htmlscript script">?&gt;</code><code class="htmlscript plain">"&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>109</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>110</code></td><td class="content"><code class="htmlscript script">&lt;?php</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>111</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript php-keyword keyword">foreach</code> <code class="htmlscript plain">(</code><code class="htmlscript php-variable variable">$knownfields</code> <code class="htmlscript php-keyword keyword">as</code> <code class="htmlscript php-variable variable">$key</code> <code class="htmlscript plain">=&gt; </code><code class="htmlscript php-variable variable">$disp</code><code class="htmlscript plain">)</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>112</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>113</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-string string">if (</code><code class="htmlscript php-varinstr variable">$disp</code> <code class="htmlscript php-string string">== "</code><code class="htmlscript php-string string">"</code><code class="htmlscript plain">)&nbsp; </code><code class="htmlscript php-keyword keyword">continue</code><code class="htmlscript plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>114</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>115</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-keyword keyword">if</code> <code class="htmlscript plain">(</code><code class="htmlscript php-function functions">isset</code><code class="htmlscript plain">(</code><code class="htmlscript php-variable variable">$sso_protectedfields</code><code class="htmlscript plain">[</code><code class="htmlscript php-variable variable">$key</code><code class="htmlscript plain">]) &amp;&amp; </code><code class="htmlscript php-variable variable">$sso_protectedfields</code><code class="htmlscript plain">[</code><code class="htmlscript php-variable variable">$key</code><code class="htmlscript plain">])</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>116</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>117</code></td><td class="content"><code class="htmlscript script">?&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>118</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;</code><code class="htmlscript keyword">div</code> <code class="htmlscript color1">class</code><code class="htmlscript plain">=</code><code class="htmlscript string">"sso_main_formitem"</code><code class="htmlscript plain">&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>119</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;</code><code class="htmlscript keyword">div</code> <code class="htmlscript color1">class</code><code class="htmlscript plain">=</code><code class="htmlscript string">"sso_main_formtitle"</code><code class="htmlscript plain">&gt;</code><code class="htmlscript script">&lt;?php</code> <code class="htmlscript php-keyword keyword">echo</code> <code class="htmlscript php-function functions">htmlspecialchars</code><code class="htmlscript plain">(</code><code class="htmlscript php-custfunc functions">BB_Translate</code><code class="htmlscript plain">(</code><code class="htmlscript php-variable variable">$disp</code><code class="htmlscript plain">)); </code><code class="htmlscript script">?&gt;</code><code class="htmlscript plain">&lt;/</code><code class="htmlscript keyword">div</code><code class="htmlscript plain">&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>120</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;</code><code class="htmlscript keyword">div</code> <code class="htmlscript color1">class</code><code class="htmlscript plain">=</code><code class="htmlscript string">"sso_main_formdata"</code><code class="htmlscript plain">&gt;&lt;</code><code class="htmlscript keyword">div</code> <code class="htmlscript color1">class</code><code class="htmlscript plain">=</code><code class="htmlscript string">"sso_main_static"</code><code class="htmlscript plain">&gt;</code><code class="htmlscript script">&lt;?php</code> <code class="htmlscript php-keyword keyword">echo</code> <code class="htmlscript php-function functions">htmlspecialchars</code><code class="htmlscript plain">(</code><code class="htmlscript php-variable variable">$sso_user_info</code><code class="htmlscript plain">[</code><code class="htmlscript php-variable variable">$key</code><code class="htmlscript plain">]); </code><code class="htmlscript script">?&gt;</code><code class="htmlscript plain">&lt;/</code><code class="htmlscript keyword">div</code><code class="htmlscript plain">&gt;&lt;/</code><code class="htmlscript keyword">div</code><code class="htmlscript plain">&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>121</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;/</code><code class="htmlscript keyword">div</code><code class="htmlscript plain">&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>122</code></td><td class="content"><code class="htmlscript script">&lt;?php</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>123</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>124</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript php-string string">else if ((isset(</code><code class="htmlscript php-varinstr variable">$sso_user_info</code><code class="htmlscript php-string string">[</code><code class="htmlscript php-varinstr variable">$key</code><code class="htmlscript php-string string">]) &amp;&amp; </code><code class="htmlscript php-varinstr variable">$sso_user_info</code><code class="htmlscript php-string string">[</code><code class="htmlscript php-varinstr variable">$key</code><code class="htmlscript php-string string">] != "</code><code class="htmlscript php-string string">"</code><code class="htmlscript plain">) || </code><code class="htmlscript php-function functions">isset</code><code class="htmlscript plain">(</code><code class="htmlscript php-variable variable">$sso_apikey_info</code><code class="htmlscript plain">[</code><code class="htmlscript php-string string">"field_map"</code><code class="htmlscript plain">][</code><code class="htmlscript php-variable variable">$key</code><code class="htmlscript plain">]))</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>125</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>126</code></td><td class="content"><code class="htmlscript script">?&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>127</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;</code><code class="htmlscript keyword">div</code> <code class="htmlscript color1">class</code><code class="htmlscript plain">=</code><code class="htmlscript string">"sso_main_formitem"</code><code class="htmlscript plain">&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>128</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;</code><code class="htmlscript keyword">div</code> <code class="htmlscript color1">class</code><code class="htmlscript plain">=</code><code class="htmlscript string">"sso_main_formtitle"</code><code class="htmlscript plain">&gt;</code><code class="htmlscript script">&lt;?php</code> <code class="htmlscript php-keyword keyword">echo</code> <code class="htmlscript php-function functions">htmlspecialchars</code><code class="htmlscript plain">(</code><code class="htmlscript php-custfunc functions">BB_Translate</code><code class="htmlscript plain">(</code><code class="htmlscript php-variable variable">$disp</code><code class="htmlscript plain">)); </code><code class="htmlscript script">?&gt;</code><code class="htmlscript plain">&lt;/</code><code class="htmlscript keyword">div</code><code class="htmlscript plain">&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>129</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;</code><code class="htmlscript keyword">div</code> <code class="htmlscript color1">class</code><code class="htmlscript plain">=</code><code class="htmlscript string">"sso_main_formdata"</code><code class="htmlscript plain">&gt;&lt;</code><code class="htmlscript keyword">input</code> <code class="htmlscript color1">class</code><code class="htmlscript plain">=</code><code class="htmlscript string">"sso_main_text"</code> <code class="htmlscript color1">type</code><code class="htmlscript plain">=</code><code class="htmlscript string">"text"</code> <code class="htmlscript plain">name="</code><code class="htmlscript script">&lt;?php</code> <code class="htmlscript php-keyword keyword">echo</code> <code class="htmlscript php-custfunc functions">SSO_FrontendField</code><code class="htmlscript plain">(</code><code class="htmlscript php-variable variable">$key</code><code class="htmlscript plain">); </code><code class="htmlscript script">?&gt;</code><code class="htmlscript plain">" value="</code><code class="htmlscript script">&lt;?php</code> <code class="htmlscript php-keyword keyword">echo</code> <code class="htmlscript php-function functions">htmlspecialchars</code><code class="htmlscript plain">(</code><code class="htmlscript php-custfunc functions">SSO_FrontendFieldValue</code><code class="htmlscript plain">(</code><code class="htmlscript php-variable variable">$key</code><code class="htmlscript plain">, </code><code class="htmlscript php-variable variable">$sso_user_info</code><code class="htmlscript plain">[</code><code class="htmlscript php-variable variable">$key</code><code class="htmlscript plain">])); </code><code class="htmlscript script">?&gt;</code><code class="htmlscript plain">" /&gt;&lt;/</code><code class="htmlscript keyword">div</code><code class="htmlscript plain">&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>130</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;/</code><code class="htmlscript keyword">div</code><code class="htmlscript plain">&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>131</code></td><td class="content"><code class="htmlscript script">&lt;?php</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>132</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>133</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>134</code></td><td class="content"><code class="htmlscript script">?&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>135</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;</code><code class="htmlscript keyword">script</code> <code class="htmlscript color1">type</code><code class="htmlscript plain">=</code><code class="htmlscript string">"text/javascript"</code><code class="htmlscript plain">&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>136</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">jQuery('input.sso_main_text:first').focus();</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>137</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;/</code><code class="htmlscript keyword">script</code><code class="htmlscript plain">&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>138</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;</code><code class="htmlscript keyword">div</code> <code class="htmlscript color1">class</code><code class="htmlscript plain">=</code><code class="htmlscript string">"sso_main_formsubmit"</code><code class="htmlscript plain">&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>139</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;</code><code class="htmlscript keyword">input</code> <code class="htmlscript color1">type</code><code class="htmlscript plain">=</code><code class="htmlscript string">"submit"</code> <code class="htmlscript color1">name</code><code class="htmlscript plain">=</code><code class="htmlscript string">"&lt;?php echo SSO_FrontendField("</code><code class="htmlscript plain">submit</code><code class="htmlscript php-string string">"</code><code class="htmlscript plain">); </code><code class="htmlscript script">?&gt;</code><code class="htmlscript plain">" value="</code><code class="htmlscript script">&lt;?php</code> <code class="htmlscript php-keyword keyword">echo</code> <code class="htmlscript php-function functions">htmlspecialchars</code><code class="htmlscript plain">(</code><code class="htmlscript php-custfunc functions">BB_Translate</code><code class="htmlscript plain">(</code><code class="htmlscript php-string string">"Continue"</code><code class="htmlscript plain">)); </code><code class="htmlscript script">?&gt;</code><code class="htmlscript plain">" /&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>140</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;/</code><code class="htmlscript keyword">div</code><code class="htmlscript plain">&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>141</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;/</code><code class="htmlscript keyword">form</code><code class="htmlscript plain">&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>142</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;/</code><code class="htmlscript keyword">div</code><code class="htmlscript plain">&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>143</code></td><td class="content"><code class="htmlscript plain">&lt;/</code><code class="htmlscript keyword">div</code><code class="htmlscript plain">&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>144</code></td><td class="content"><code class="htmlscript plain">&lt;/</code><code class="htmlscript keyword">div</code><code class="htmlscript plain">&gt;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>145</code></td><td class="content"><code class="htmlscript script">&lt;?php</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>146</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>147</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="htmlscript php-keyword keyword">echo</code> <code class="htmlscript php-variable variable">$sso_footer</code><code class="htmlscript plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>148</code></td><td class="content"><code class="htmlscript script">?&gt;</code></td></tr></tbody></table></div></div></div></div></div>

<p>This code looks very different because it shows the actual form 
construction and the approach is entirely different from the previous 
approach.  Here versioned accounts are not being used but the 
interception of the login allows me to not have to create a separate 
user profile page.  This system allows the user to evaluate the stored 
information they are allowed to modify and make changes to it before 
continuing.</p>

<p>One significant benefit of implementing 'index_hook.php' is that bots
 will have to get through it before continuing.  Custom-built code 
breaks most bots.  Therefore, doing virtually anything here will throw a
 monkey wrench into some bot operator's life.</p>

<h2>Securing the Admin Interface</h2>

<p>The last key step to most installations is to secure the SSO server 
administration interface.  The original access script just allowed a 
specific IP address.  If this is the desired behavior, there is some 
authentication risk but that can be mitigated by deleting 
'admin_hook.php' and then no one can access the admin interface until 
'admin_hook.php' is re-uploaded to the server.</p>

<p>The simpler method is to install a second SSO client into the SSO 
server admin directory.  When setting up the API key configuration, map 
the 'sso_admin' tag to itself.  Then use the following for the 
'admin_hook.php' script:</p>

<div class="shortcode"><div class="syntaxhighlight-wrap"><div class="syntaxhighlighter  " id="highlighter_70073"><div class="bar"><div class="toolbar"><a class="item viewSource" style="width: 16px; height: 16px;" title="view source" href="#viewSource">view source</a><div class="item copyToClipboard"><embed id="highlighter_70073_clipboard" type="application/x-shockwave-flash" title="copy to clipboard" allowscriptaccess="always" wmode="transparent" flashvars="highlighterId=highlighter_70073" menu="false" src="Single%20Sign-On%20Server_Client%20Documentation_files/clipboard.swf" height="16" width="16"></div><a class="item printSource" style="width: 16px; height: 16px;" title="print" href="#printSource">print</a><a class="item about" style="width: 16px; height: 16px;" title="?" href="#about">?</a></div></div><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>01</code></td><td class="content"><code class="php-tag">&lt;?php</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>02</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(!</code><code class="php-function functions">defined</code><code class="plain">(</code><code class="php-string string">"SSO_FILE"</code><code class="plain">))&nbsp; </code><code class="php-function functions">exit</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>03</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>04</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">require_once</code> <code class="php-string string">"client/config.php"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>05</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">require_once</code> <code class="plain">SSO_CLIENT_ROOT_PATH . </code><code class="php-string string">"/index.php"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>06</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>07</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-variable variable">$sso_client</code> <code class="plain">= </code><code class="php-keyword keyword">new</code> <code class="plain">SSO_Client;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>08</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-variable variable">$sso_client</code><code class="plain">-&gt;</code><code class="php-custfunc functions">Init</code><code class="plain">(</code><code class="php-keyword keyword">array</code><code class="plain">(</code><code class="php-string string">"sso_impersonate"</code><code class="plain">, </code><code class="php-string string">"sso_remote_id"</code><code class="plain">));</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>09</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>10</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-string string">if (!</code><code class="php-varinstr variable">$sso_client</code><code class="php-string string">-&gt;LoggedIn())&nbsp; </code><code class="php-varinstr variable">$sso_client</code><code class="php-string string">-&gt;Login("</code><code class="php-string string">"</code><code class="plain">, </code><code class="php-string string">"You must login to use this system."</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>11</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>12</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">// Send the browser cookies.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>13</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-variable variable">$sso_client</code><code class="plain">-&gt;</code><code class="php-custfunc functions">SaveUserInfo</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>14</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>15</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">// Test permissions for the user.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>16</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-string string">if (!</code><code class="php-varinstr variable">$sso_client</code><code class="php-string string">-&gt;IsSiteAdmin() &amp;&amp; !</code><code class="php-varinstr variable">$sso_client</code><code class="php-string string">-&gt;HasTag("</code><code class="plain">sso_admin</code><code class="php-string string">"))&nbsp; </code><code class="php-varinstr variable">$sso_client</code><code class="php-string string">-&gt;Login("</code><code class="php-string string">"</code><code class="plain">, </code><code class="php-string string">"insufficient_permissions"</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>17</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>18</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">// Get the internal token for use with XSRF defenses.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>19</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-variable variable">$bb_usertoken</code> <code class="plain">= </code><code class="php-variable variable">$sso_client</code><code class="plain">-&gt;</code><code class="php-custfunc functions">GetSecretToken</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>20</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>21</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-variable variable">$sso_site_admin</code> <code class="plain">= </code><code class="php-variable variable">$sso_client</code><code class="plain">-&gt;</code><code class="php-custfunc functions">IsSiteAdmin</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>22</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-variable variable">$sso_user_id</code> <code class="plain">= </code><code class="php-variable variable">$sso_client</code><code class="plain">-&gt;</code><code class="php-custfunc functions">GetUserID</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>23</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>24</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">// Add a menu option to logout.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>25</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">function</code> <code class="php-custfunc functions">AdminHook_MenuOpts</code><code class="plain">()</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>26</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>27</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">global</code> <code class="php-variable variable">$sso_menuopts</code><code class="plain">, </code><code class="php-variable variable">$sso_client</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>28</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>29</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$sso_menuopts</code><code class="plain">[</code><code class="php-string string">"SSO Server Options"</code><code class="plain">][</code><code class="php-string string">"Logout"</code><code class="plain">] = </code><code class="php-custfunc functions">BB_GetRequestURLBase</code><code class="plain">() . </code><code class="php-string string">"?action=logout&amp;sec_t="</code> <code class="plain">. </code><code class="php-custfunc functions">BB_CreateSecurityToken</code><code class="plain">(</code><code class="php-string string">"logout"</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>30</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>31</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(</code><code class="php-function functions">isset</code><code class="plain">(</code><code class="php-variable variable">$_REQUEST</code><code class="plain">[</code><code class="php-string string">"action"</code><code class="plain">]) &amp;&amp; </code><code class="php-variable variable">$_REQUEST</code><code class="plain">[</code><code class="php-string string">"action"</code><code class="plain">] == </code><code class="php-string string">"logout"</code><code class="plain">)</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>32</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>33</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$sso_client</code><code class="plain">-&gt;</code><code class="php-custfunc functions">Logout</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>34</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>35</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-function functions">header</code><code class="plain">(</code><code class="php-string string">"Location: "</code> <code class="plain">. </code><code class="php-custfunc functions">BB_GetFullRequestURLBase</code><code class="plain">());</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>36</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-function functions">exit</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>37</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>38</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>39</code></td><td class="content"><code class="php-tag">?&gt;</code></td></tr></tbody></table></div></div></div></div></div>

<p>This code is fairly simple and only allows users with 
'sso_site_admin' and 'sso_admin' tags to access the system.  Similar 
sort of code can be used for Admin Pack and a Barebones CMS login hook 
but with different tags as necessary.</p>

<h2>Miscellaneous Customization</h2>

<p>When more than one provider is available, the user gets a selection 
screen.  At this point, the user starts seeing some of the internal 
names such as "Generic Login" show up but this is not necessarily 
desired behavior.  Customization of display strings is accomplished 
through the multilingual support options.  Using IANA language codes 
(e.g. 'en-us'), a language pack can be built to transform nearly all 
display strings in order to display whatever output you want users to 
see.  Using the language pack approach allows for easier future upgrades
 of the SSO server and client.</p>

<p>The multilingual support in the SSO server is more robust than 
displaying alternate strings.  The SSO client also supports passing an 
IANA language code along to the SSO server for a seamless transition 
across hosts and complete translation support of almost every string 
(including those in a header and footer).  The configuration files and 
installers can also select default languages for various scenarios.</p>

<p>When multiple providers are active and the CSS file is used from the 
'examples' directory, the default icons may not be what you want to use.
  There is a sample Photoshop PSD file included with the Generic Login 
icon pattern.  That should make it easier to construct alternate or 
additional icons to use with the various SSO server providers or your 
own provider.</p>

<p>There are several callbacks in the SSO server that hook scripts can 
utilize.  An example of this is found in the "Securing the Admin 
Interface" section above.</p>

<p>The SSO server endpoint supports Custom API keys.  These are similar 
to Remote API keys but won't do anything until you write code to support
 this key type but they allow for complete customization of the server 
via the same secure communication mechanisms of other API keys.  For 
example, they could be used to set and retrieve fields and/or tags that 
are only available to a private API for server-to-server communications.</p>

<h2>User Impersonation</h2>

<p>Sometimes it becomes necessary to impersonate users.  There are two 
common scenarios where user impersonation becomes useful:  Seeing an 
issue that a specific user is seeing with an application and users who 
find new ways to forget their sign in password.  Both scenarios are 
equally frustrating for the user and system administrators.  System 
administrators will generally have site admin privileges and not be able
 to see what ordinary user accounts see unless they have a separate 
account for that purpose.  User impersonation becomes a tool for making 
life simpler.  However, user impersonation support is a security risk.</p>

<p>The SSO server/client, by default, disables user impersonation for 
the aforementioned security reasons.  Enabling user impersonation 
requires enabling it for each user account that needs it, the 
application's API key, and the application itself.  The first step is to
 enable the API key and the application for passing 'sso_impersonate' 
with an account impersonation token.  Once that is done, the API key 
will accept impersonation tokens from that point on (unless it is 
disabled again later).  The next step is to locate a user account and 
enable impersonation by selecting 'Yes' from the appropriate drop down 
and clicking 'Save'.  The server will generate a token and a new drop 
down for automation appears that is optional.  Take the impersonation 
token and construct a URL by  using the token with 'sso_impersonate'.  
If you are signed in, you'll likely need to sign out first.  An 
impersonation URL will look like:</p>

<p>http://yourdomain.com/?sso_impersonate=[impersonation_token]</p>

<p>User impersonation URLs can be bookmarked in a browser for a 
one-click sign in.  This can be useful for users who frequently forget 
their password.  Such users are likely a security risk anyway by being 
part of the group of people who select weak passwords, so the one-click 
sign in token (64 completely random letters and numbers) is 
theoretically more secure as long as it is only transmitted over HTTPS.</p>

<h2>SSO Server Provider:  Remote Login</h2>

<p>The Remote Login provider gets its own section of documentation 
because, behind the scenes, it is a strange provider with special 
capabilities that both the SSO server endpoint and the SSO client 
directly support.  It is the only provider like this for very specific 
reasons that will become apparent shortly.  There are three different 
scenarios where the Remote Login provider comes in real handy:</p>

<ul>
	<li>You have the SSO server sitting outside the firewall but want to  
allow employees who are logged in via VPN or on the network to sign in  
using Active Directory credentials rather than manage multiple sign  
ins.  I.T. won't, because of corporate security policies, open a hole in
  the firewall so you can use the SSO server LDAP provider, but they are
  willing to let you use an internal server behind the firewall for 
whatever you might want to do.</li>
	<li>You, as a geek/nerd, develop a web application for a company that 
gets to be somewhat popular.  You have nothing to do with the sales of 
the product and pride yourself on your technical prowess.  One day Intel
 [or the name of some other large corporation] approaches your 
organization and says, "Hey, we like your web application, let's make a 
contract."  (In not so few words.)  The sales person with giant dollar 
signs in their eyes from the commission waltzes into your area and says 
something like, "Hey, we just sold a big contract for our application to
 Intel [or whoever] and they want to sign into our system with their 
login system behind their fire....something-or-other (they mean 
'firewall').  Anyway, here's their technical contact you'll be working 
with.  Oh!  And we promised they could be using our application two days
 from now.  So...make it happen."  Then they waltz out of your area 
acting like they did something "hip and cool."</li>
	<li>You have an existing SSO server instance using the Generic Login 
provider one way (e.g. administrators sign in with a username and 
password for the admin interface) and want to allow those users to sign 
into a second SSO server instance used for the application frontend.  Or
 some equally bizarre scenario where remoting the login makes the most 
sense and your brains would turn to gelatin trying to wrap your head 
around the problem.</li>
</ul>

<p>The Remote Login provider solves all of these problems and takes 
roughly 30 minutes to an hour to set up.  The first scenario is common 
and sign ins can actually be fully automated in most corporate 
environments (Apache + mod_auth_sspi + Active Directory + SSO Client + a
 little software glue).  The second scenario is the one scenario most 
Software as a Service (SaaS) developers have nightmares over having to 
deal with but is actually quite similar to the first scenario - the only
 difference is that you have to work with someone else usually via 
e-mail.  The third is basically custom work and the Remote Provider is 
merely there to make the process less painful.</p>

<p>The first step to using the Remote Login provider is to install it.  
Click "Install" under the "Remote Login" option in the SSO server admin.
  Click the "Install" button.  This creates the necessary database table
 that will contain the remotes.</p>

<p>Next, set up a "Remote" API key.  This procedure is identical to 
setting up a "Normal" API key.  After creating the API key as usual 
(leave the URL field empty for now), change its "Type" to "Remote" and 
click "Save" and the API key will be a Remote API key.  Also, be sure to
 map fields you want to allow the remote to be able to write to and set 
the "Permissions" to "Read/Write" on each mapped field.  Remote API keys
 can only be used with the SSO_RemoteLogin() call in the SSO client.  
That is, the usual SSO client functions (e.g. SSO_Login()) are disabled 
at the SSO server level.  Remote API keys can only write field mapped 
data, which is subsequently considered protected by the Remote Login 
provider.</p>

<p>Copy the API key numerical ID to the clipboard (or just memorize it) 
and select "Manage Remotes" under "Remote Login".  Click "Add Remote."  
Enter in the business name or business unit that will sign in with this 
remote and paste or type in the API key numerical ID.  Click "Create."  
If all goes well, the editing screen will appear.</p>

<p>On the editing screen, fill in any extra details.  The icon URL is 
highly recommended.  If the user gets signed out of the application for 
any reason, the Remote Login provider will show the icon and business 
name as an option for signing into the system in addition to any other 
providers that might be enabled.  The "Automate Validation Phase" option
 allows for setting up a remote to bypass the validation phase of 
signing in, which can be useful to enable for creating a seamless 
experience for a large company.  This results in similar behavior to how
 namespace sign ins work.</p>

<p>At this point the remote is about halfway set up.  The other half has to be set up on the remote end of things.  See:</p>

<p><a href="https://barebonescms.com/documentation/sso/setting_up_a_remote_sign_in/">Setting Up a Remote Sign In</a></p>

<p>I separated that documentation out from this documentation so as to 
not overwhelm any developer you might need to send it to.  This 
documentation page is extensive but they don't necessarily need to 
understand how this system works to integrate with it.</p>

<h2>Using Custom API Keys</h2>

<p>If you have entered the area of custom API keys, then you have 
reached a limitation of the core SSO server.  Instead of working with 
custom API keys and endpoint hooks, it is highly recommended to find 
another approach to accomplishing the task.  There are very few reasons 
to ever use a custom API key when other options almost always exist that
 will work better.  Custom API keys should only be used as a last 
resort.</p>

<p>That said, creating a custom API key is doable but is a process that involves multiple steps:</p>

<ul>
	<li>First, create an API key in the SSO server admin and edit it.  The 
"Type" dropdown contains three options - Normal, Remote, and Custom.  
Select "Custom" and save the API key.  This creates the custom API key 
that will be used later.</li>
	<li>Create a file called 'endpoint_hook.php' in the same directory as 
'endpoint.php'.  The endpoint will automatically load this file if it 
exists.</li>
	<li>Write a function called EndpointHook_CustomHandler().  The function
 takes no options and is expected to return a boolean to the caller that
 indicates whether or not the "action" was handled.</li>
	<li>Within EndpointHook_CustomHandler(), write the custom code to do 
the task you want.  The handler should handle the "action" you plan to 
use with SSO_Client::SendRequest().  It is highly recommended to 
actually open and read 'endpoint.php' to gain a proper understanding of 
how the SSO server endpoint functions for the operations it handles 
natively.</li>
	<li>From the application using the SSO client, call 
SSO_Client::SendRequest() (e.g. $sso_client-&gt;SendRequest()) with the 
action you wish to run and the options you wish to send.  Be sure to 
check the return value.  The API key and secret must be the custom API 
key and secret from earlier (normal and remote API keys won't work).  
Read the documentation on SSO_Client::SendRequest() and look at the 
source code in 'support/sso_functions.php' in the client to see how this
 low-level function works.</li>
</ul>

<p>Those are the basic guidelines for working with custom API keys.  The
 best way to work with them is to crack open the relevant source code of
 the SSO server and client to understand what is going on.  Help with 
working with custom API keys is limited and falls outside the general 
scope of support.</p>

<h2>Creating a SSO Server Provider</h2>

<p>Suppose a popular method of logging in is not already a part of the 
SSO server.  This is where creating a new SSO server provider comes into
 play.  This can be quite the undertaking and the simplest solution is 
probably to request it in the forums.  That said, it is best to look at 
the source code to LDAP provider.  That is about as simple as the 
average provider gets and it took me less than a day to create and test 
the LDAP provider.  Whatever you do, don't look at the Generic Login 
provider source code or you'll have a heart attack and die.  Generic 
Login is a very complex provider due to its flexibility.</p>

<p>There are three aspects to every SSO server provider:  The 
configuration, the admin interface functions, and the user interface 
functions.  The SSO server manages all aspects of loading and calling 
the correct functions at the appropriate times.</p>

<p>All SSO server providers are classes that derive from the base class 
'SSO_ProviderBase'.  The default functions in the base class don't do 
much of anything.  Since there is a base class, not every function must 
be defined in the derived class.</p>

<p>To create a new provider, create a directory in the 'providers' 
directory with the name of the provider.  Limit the characters of the 
name to lowercase letters and underscores.  The 'sso_' prefix is 
reserved for official providers.  Inside the new directory, create an 
'index.php' file.  The class name must be the same name as the directory
 (hence the restrictions on the directory name).</p>

<p>The rest of this section is a breakdown of each member function and what it is expected to do.</p>

<h3>SSO_ProviderBase::Init()</h3>

<p>Parameters:  None.</p>

<p>Returns:  Nothing.</p>

<p>This member function is expected to initialize the class settings in 
preparation for other calls.  $sso_settings is guaranteed to at least 
contain a key-value pair of class name and an empty array.  Most 
providers use this function as an opportunity to initialize an 
'iprestrict' option with the results of a SSO_InitIPFields() call.</p>

<h3>SSO_ProviderBase::DisplayName()</h3>

<p>Parameters:  None.</p>

<p>Returns:  A translated string containing the name of the provider to display to a user.</p>

<p>This member function is expected to return a translated string that 
will be displayed to the user.  This function is called both within the 
admin interface and the frontend - primarily for a selector when more 
than one provider is enabled.</p>

<h3>SSO_ProviderBase::DefaultOrder()</h3>

<p>Parameters:  None.</p>

<p>Returns:  An integer containing the default display order of the provider.</p>

<p>This member function is expected to return the default display order 
for the provider in relation to other providers when more than one is 
available/enabled.  The default order can be overridden by changing the 
global configuration in the admin interface.</p>

<h3>SSO_ProviderBase::MenuOpts()</h3>

<p>Parameters:  None.</p>

<p>Returns:  An array containing 'name' and 'items' keys that map to a string and array of links to be displayed respectively.</p>

<p>This member function is expected to generate a set of items to 
display in the admin interface and a section name for the items.  Most 
providers differentiate between users with 'sso_site_admin' and 
'sso_admin' privileges here and show only relevant options to the user. 
 The array returned is ordered by the display order before being 
included into the global $sso_menuopts array.  URLs are generally 
generated with the SSO_CreateConfigURL() function.</p>

<h3>SSO_ProviderBase::Config()</h3>

<p>Parameters:  None.</p>

<p>Returns:  Nothing.</p>

<p>This member function is expected to take request inputs and generate a standard <a href="https://barebonescms.com/documentation/admin_pack/">Admin Pack</a> compliant interface.  Be sure to check for permissions and errors before executing any command.</p>

<h3>SSO_ProviderBase::IsEnabled()</h3>

<p>Parameters:  None.</p>

<p>Returns:  A boolean of true if the user should be able to see the provider, false otherwise.</p>

<p>This member function is expected to run a series of tests to make 
sure that the provider is enabled for a specific user.  Tests can range 
from checking for specific PHP functions and configuration settings to 
verifying that the user isn't coming from a spammer IP address.</p>

<h3>SSO_ProviderBase::GetProtectedFields()</h3>

<p>Parameters:  None.</p>

<p>Returns:  An array containing key-value pairs.</p>

<p>This member function is expected to return a mapping of SSO field 
names to a boolean value of whether the field is protected or not.  
Protected fields are not able to be modified by the user except possibly
 in the provider itself.  The only provider that currently offers direct
 editing of protected fields is the Generic Login provider.</p>

<h3>SSO_ProviderBase::GetEditUserLinks($id)</h3>

<p>Parameters:</p>

<ul>
	<li>$id - The internal provider ID that identifies the user.</li>
</ul>

<p>Returns:  An array of links.</p>

<p>This member function is expected to return an array of links if it 
supports editing of protected fields.  The $this-&gt;Config() function 
is expected to be able to handle the actual editing.</p>

<h3>SSO_ProviderBase::AddIPCacheInfo()</h3>

<p>Parameters:  None.</p>

<p>Returns:  Nothing.</p>

<p>This member function is expected to modify the global $contentopts to
 introduce additional IP address cache information when displaying 
information about an IP address.  Primarily used by various Generic 
Login rate limiting modules.</p>

<h3>SSO_ProviderBase::GenerateSelector()</h3>

<p>Parameters:  None.</p>

<p>Returns:  Nothing.</p>

<p>This member function is expected to output HTML for a selector for 
the frontend.  Only called when there is more than one enabled provider 
that the user can choose from.</p>

<h3>SSO_ProviderBase::ProcessFrontend()</h3>

<p>Parameters:  None.</p>

<p>Returns:  Nothing.</p>

<p>This member function is expected to perform all frontend tasks 
required before the user can proceed to the next step.  A login system 
of some sort is generally implemented by this function.  
SSO_ActivateUser() moves the user to the next step.</p>
<p class="float-clear"></p>

<h2>Creating a Generic Login Module</h2>

<p>The Generic Login provider supports modules.  A module is a bit of 
logic that extends the Generic Login provider's default e-mail address, 
username, and password options.  As bot authors adapt to changing 
circumstances and new ways are devised to keep them out of systems where
 they don't belong, new modules will need to be developed.  A 
custom-built module has the added advantage of doing something no one 
else is doing, which generally results in fewer bots getting through.</p>

<p>Developing a Generic Login module is not a simple task.  It is best 
to find existing modules that have aspects to them that are similar to 
what is desired and use them as a template for the new module.</p>

<p>Generic Login modules are not meant to provide additional SSO field 
mapping information.  Adding first name, last name, etc. fields is not 
the purpose of the module architecture but rather to add new system 
defenses - including legal, which is why there is a Terms of Service 
module.</p>

<p>Anyway, all Generic Login modules are classes that derive from the 
base class  'sso_login_ModuleBase'.  The official modules implement a 
private function called GetInfo() to retrieve the settings for the 
module, which is a good practice to follow.  The default functions in 
the base class don't do  much of anything.  Since there is a base class,
 not every function must be defined in the derived class.</p>

<p>To create a new Generic Login module, create a PHP file inside the 
'providers/sso_login/modules' directory.  The name of the file before 
'.php' should consist of lowercase letters and underscores and will be 
used as the internal module name.  The 'sso_' prefix is reserved for 
official modules.  The class name must be 
'sso_login_module_[modulename]'.</p>

<p>The rest of this section is a breakdown of each  member function and what it is expected to do.</p>

<h3>sso_login_ModuleBase::DefaultOrder()</h3>

<p>Parameters:  None.</p>

<p>Returns:  An integer containing the field display order for the 
module or a boolean of false if the module has no publicly displayed 
fields.</p>

<p>This member function is expected to return the order of the module 
when displaying fields to the user.  The Generic Login provider manages 
this setting and won't show an ordering option when false is returned.</p>

<h3>sso_login_ModuleBase::ConfigSave()</h3>

<p>Parameters:  None.</p>

<p>Returns:  Nothing.</p>

<p>This member function is expected to save the configuration changes 
for the module.  BB_SetPageMessage() can set an information or error 
message for the user to see.</p>

<h3>sso_login_ModuleBase::Config(&amp;$contentopts)</h3>

<p>Parameters:</p>

<ul>
	<li>$contentopts - An array containing Admin Pack page information.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is expected to append fields to 
$contentopts["fields"] containing configuration options for the module. 
 This function is called only if the module is enabled.  This may also 
modify other parts of the array (e.g. 'htmldesc') to add links to a 
custom page such that $this-&gt;CustomConfig() is called.</p>

<h3>sso_login_ModuleBase::CustomConfig()</h3>

<p>Parameters:  None.</p>

<p>Returns:  Nothing.</p>

<p>This member function is expected to construct and display an entire 
page itself using BB_GeneratePage().  Not really necessary but available
 just in case.  I originally was doing something with this and then 
ended up not needing it but left the logic in anyway.</p>

<h3>sso_login_ModuleBase::CheckEditUserFields(&amp;$userinfo)</h3>

<p>Parameters:</p>

<ul>
	<li>$userinfo - An array containing user information.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is expected to validate user input and save the 
user's information into the array if it validates.  This function is 
called when submitting changes while editing a user in the Generic Login
  admin interface.</p>

<h3>sso_login_ModuleBase::AddEditUserFields(&amp;$contentopts, &amp;$userinfo)</h3>

<p>Parameters:</p>

<ul>
	<li>$contentopts - An array containing Admin Pack page information.</li>
	<li>$userinfo - An array containing user information.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is expected to append fields to 
$contentopts["fields"] when the user is being edited in the Generic 
Login admin interface.</p>

<h3>sso_login_ModuleBase::AddFindUserOptions(&amp;$contentopts, &amp;$options, &amp;$num)</h3>

<p>Parameters:</p>

<ul>
	<li>$contentopts - An array containing Admin Pack page information.</li>
	<li>$options - An array containing key-value pairs for "Include in Output" checkboxes at the end.</li>
	<li>$num - An integer containing the number of columns output so far.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is expected to append search fields to 
$contentopts["fields"] and any extra output options to the $options 
array.  This function lets a module add extra search fields and output 
options to the Generic Login search page to find users.  The sequence of
 steps for each new field must be to check if $num is the  third entry 
in the current row and to append "startrow" if it is, then append the 
field, and finally increment $num.</p>

<h3>sso_login_ModuleBase::AddFindUserCols(&amp;$cols)</h3>

<p>Parameters:</p>

<ul>
	<li>$cols - An array containing column names.</li>
</ul>

<p>Returns:  A boolean of true if the function added columns, otherwise false.</p>

<p>This member function is expected to append a column name to the input
 array if the user requested that column to be displayed.  If false is 
returned, the module will be excluded from handling row information 
later.</p>

<h3>sso_login_ModuleBase::AddFindUserRowInfo(&amp;$result, &amp;$userinfo)</h3>

<p>Parameters:</p>

<ul>
	<li>$result - An array containing the current row being constructed.</li>
	<li>$userinfo - An array containing user information.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is expected to append the columns the user 
requested to the row using the current user information.  This function 
is only called by the Generic Login search enging if AddFindUserCols() 
returned true.  This function should be prepared to handle mangled data 
due to changes in the settings over time.</p>

<h3>sso_login_ModuleBase::IsAllowed()</h3>

<p>Parameters:  None.</p>

<p>Returns:  A boolean of true if the user is allowed to see the Generic Login provider, false otherwise.</p>

<p>This member function is not used by the official modules but can be 
used to hide the Generic Login provider.  The default return value is 
true.  This was originally going to be used in the rate limiting module,
 but that changed during development to be more user-friendly.</p>

<h3>sso_login_ModuleBase::AddProtectedFields(&amp;$result)</h3>

<p>Parameters:</p>

<ul>
	<li>$result - An array containing key-value pairs.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is expected to set a mapping of SSO field  names
 to a boolean value of whether a field is protected or not.  This 
function exists for future development purposes and should not be used 
for current modules.</p>

<h3>sso_login_ModuleBase::AddIPCacheInfo($displayname)</h3>

<p>Parameters:</p>

<ul>
	<li>$displayname - A string containing the base display name to use.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is expected to modify the global $contentopts to
  introduce additional IP address cache information when displaying  
information about an IP address.  Primarily used by various rate 
limiting modules to show a user's current rate limiting status.</p>

<h3>sso_login_ModuleBase::ModifyEmail($userinfo, &amp;$htmlmsg, &amp;$textmsg)</h3>

<p>Parameters:</p>

<ul>
	<li>$userinfo - An array containing user information.</li>
	<li>$htmlmsg - A string containing a message in HTML.</li>
	<li>$textmsg - A string containing a message in plain text.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is expected to modify an e-mail.  This allows a 
module to add extra string replacement tokens to e-mail messages sent to
 the user.  An example of this is the anti-phishing module with the 
@ANTIPHISH@ string replacement token.</p>

<h3>sso_login_ModuleBase::TwoFactorCheck(&amp;$result, $userinfo)</h3>

<p>Parameters:</p>

<ul>
	<li>$result - An array containing error and warning messages.</li>
	<li>$userinfo - An array containing user information.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is expected to check a two-factor authentication
 code and add an error message if the check fails.  The member function 
may check the value of $userinfo["two_factor_method"] to see if the 
module is supposed to handle it or not.</p>

<h3>sso_login_ModuleBase::TwoFactorFailed(&amp;$result, $userinfo)</h3>

<p>Parameters:</p>

<ul>
	<li>$result - An array containing error and warning messages.</li>
	<li>$userinfo - An array containing user information.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is lets a module act on failures of two-factor 
authentications.  Primarily used by the Rate Limiting module to only 
allow a certain number of failures before requiring the user to sign in 
again.</p>

<h3>sso_login_ModuleBase::SignupCheck(&amp;$result, $ajax, $admin)</h3>

<p>Parameters:</p>

<ul>
	<li>$result - An array containing error and warning messages.</li>
	<li>$ajax - A boolean that specifies if this is part of an AJAX callback.</li>
	<li>$admin - A boolean that specifies if this is being called from the SSO server admin.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is expected to check the user's input for 
validity and append any messages to be displayed to the $result array.  
This function is called during the Generic Login signup process.  The 
$ajax parameter can be used to take a slightly different path through 
the code because, generally, only one field is being checked when AJAX 
is used on a signup form.  Modules that support both SignupCheck() and 
UpdateInfoCheck() generally call an internal function that handles both 
calls.</p>

<h3>sso_login_ModuleBase::SignupAddInfo(&amp;$userinfo, $admin)</h3>

<p>Parameters:</p>

<ul>
	<li>$userinfo - An array containing user information.</li>
	<li>$admin - A boolean that specifies if this is being called from the SSO server admin.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is expected to add information to the user 
information array based on user input.  This function is called during 
the Generic Login signup process.</p>

<h3>sso_login_ModuleBase::SignupDone($userid, $admin)</h3>

<p>Parameters:</p>

<ul>
	<li>$userid - An integer containing the user ID of the new user.</li>
	<li>$admin - A boolean that specifies if this is being called from the SSO server admin.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function lets a module act on a newly created user in the Generic Login provider database.</p>

<h3>sso_login_ModuleBase::GetTwoFactorName()</h3>

<p>Parameters:  None.</p>

<p>Returns:  A boolean of false or a string to display to the user 
representing the two-factor authentication mechanism that the module 
supports.</p>

<p>This member function lets the Generic Login provider know which 
modules offer two-factor authentication capabilities and presents the 
options to the user in various dropdowns.</p>

<h3>sso_login_ModuleBase::GenerateSignup($admin)</h3>

<p>Parameters:</p>

<ul>
	<li>$admin - A boolean that specifies if this is being called from the SSO server admin.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is expected to generate fields for the user to 
view or fill in.  Can also output Javascript.  Fields should be wrapped 
using standard 'div' wrapping.  See existing modules on how to do this 
correctly.  Output is cached and reordered according to the module 
ordering specified in the admin interface.</p>

<h3>sso_login_ModuleBase::VerifyCheck(&amp;$result)</h3>

<p>Parameters:</p>

<ul>
	<li>$result - An array containing error and warning messages.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is expected to check settings and append any 
errors or warnings.  Called by the Generic Login provider when verifying
 an account.  Primarily used by the rate limiting module.</p>

<h3>sso_login_ModuleBase::InitMessages(&amp;$result)</h3>

<p>Parameters:</p>

<ul>
	<li>$result - An array containing error and warning messages.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is expected to examine $_REQUEST["sso_msg"] and 
append any messages to display to the user.  Primarily used for 
redirection message management.</p>

<h3>sso_login_ModuleBase::LoginCheck(&amp;$result, $userinfo, $recoveryallowed)</h3>

<p>Parameters:</p>

<ul>
	<li>$result - An array containing error and warning messages.</li>
	<li>$userinfo - A boolean of false or an array containing user information.</li>
	<li>$recoveryallowed - A boolean that specifies if account recovery is allowed.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is expected to check the login information and 
act accordingly.  Error and warnings to display to the user are appended
 to the relevant section of the $result array.  LoginCheck() is called 
twice - once with $userinfo set to false and then again with an array of
 user information if the first check didn't encounter any problems.</p>

<h3>sso_login_ModuleBase::SendTwoFactorCode(&amp;$result, $userrow, $userinfo)</h3>

<p>Parameters:</p>

<ul>
	<li>$result - An array containing error and warning messages.</li>
	<li>$userrow - An object containing user row information.</li>
	<li>$userinfo - An array containing user information.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is expected to send the two-factor 
authentication code to the user.  sso_login::GetTimeBasedOTP() is 
typically used to generate the time-based one-time password that is 
sent.</p>

<h3>sso_login_ModuleBase::LoginAddMap(&amp;$mapinfo, $userrow, $userinfo)</h3>

<p>Parameters:</p>

<ul>
	<li>$mapinfo - An array containing SSO field mapping data.</li>
	<li>$userrow - An object containing user row information.</li>
	<li>$userinfo - An array containing user information.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is expected to append SSO field mapping data 
based on user information and configuration.  It is also a good place to
 do last minute activities such as set browser cookies.  The SSO field 
options exist for future development purposes and should not be used for
 current modules.</p>

<h3>sso_login_ModuleBase::GenerateLogin($messages)</h3>

<p>Parameters:</p>

<ul>
	<li>$messages - An array containing error and warning messages.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is expected to generate fields for the user to 
view or fill in.  Can also output Javascript.  Fields  should be wrapped
 using standard 'div' wrapping.  See existing modules  on how to do this
 correctly.  Output is cached and reordered according  to the module 
ordering specified in the admin interface.</p>

<h3>sso_login_ModuleBase::IsRecoveryAllowed($allowoptional)</h3>

<p>Parameters:</p>

<ul>
	<li>$allowoptional - A boolean that specifies if the return value should be true if the module data is not optional.</li>
</ul>

<p>Returns:  A boolean of true if the module offers a recovery option, false otherwise.</p>

<p>This member function is expected to return whether or not it supports
 account recovery under the specified conditions.  For example, the SMS 
recovery module is an optional convenience for users so, under the 
username only installation method, changing some information on an 
account would be impossible if the user didn't specify an SMS recovery 
phone number during account creation.</p>

<h3>sso_login_ModuleBase::AddRecoveryMethod($method)</h3>

<p>Parameters:</p>

<ul>
	<li>$method - A string containing the last selected recovery method.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is expected to output a valid select option for the module's account recovery support.</p>

<h3>sso_login_ModuleBase::RecoveryCheck(&amp;$result, $userinfo)</h3>

<p>Parameters:</p>

<ul>
	<li>$result - An array containing error and warning messages.</li>
	<li>$userinfo - A boolean of false or an array containing user information.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is expected to check the recovery information 
and act  accordingly.  Error and warnings to display to the user are 
appended to  the relevant section of the $result array.  RecoveryCheck()
 is called twice  - once with $userinfo set to false and then again with
 an array of user  information if the first check didn't encounter any 
problems.</p>

<h3>sso_login_ModuleBase::RecoveryDone(&amp;$result, $method, $userrow, $userinfo)</h3>

<p>Parameters:</p>

<ul>
	<li>$result - An array containing error and warning messages.</li>
	<li>$method - A string containing the selected recovery method.</li>
	<li>$userrow - An object containing user row information.</li>
	<li>$userinfo - A boolean of false or an array containing user information.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is expected to handle setting up for and going 
to the second account recovery step.  Also called for the 'email' 
recovery method.  This is the last chance to bail with an error message 
and let the user select a different account recovery method.</p>

<h3>sso_login_ModuleBase::GenerateRecovery($messages)</h3>

<p>Parameters:</p>

<ul>
	<li>$messages - An array containing error and warning messages.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is expected to generate fields for the user to 
view or fill in.  Can also output Javascript.  Fields  should be wrapped
 using standard 'div' wrapping.  See existing modules  on how to do this
 correctly.  Output is cached and reordered according  to the module 
ordering specified in the admin interface.</p>

<h3>sso_login_ModuleBase::RecoveryCheck2(&amp;$result, $userinfo)</h3>

<p>Parameters:</p>

<ul>
	<li>$result - An array containing error and warning messages.</li>
	<li>$userinfo - A boolean of false or an array containing user information.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is expected to check the second step recovery 
information and act  accordingly.  Error and warnings to display to the 
user are appended to  the relevant section of the $result array.  
RecoveryCheck2() is called twice  - once with $userinfo set to false and
 then again with an array of user  information if the first check didn't
 encounter any problems.</p>

<h3>sso_login_ModuleBase::GenerateRecovery2($messages)</h3>

<p>Parameters:</p>

<ul>
	<li>$messages - An array containing error and warning messages.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is expected to generate fields for the user to 
view or fill in.  Can also output Javascript.  Fields  should be wrapped
 using standard 'div' wrapping.  See existing modules  on how to do this
 correctly.  Output is cached and reordered according  to the module 
ordering specified in the admin interface.</p>

<h3>sso_login_ModuleBase::UpdateInfoCheck(&amp;$result, $userinfo, $ajax)</h3>

<p>Parameters:</p>

<ul>
	<li>$result - An array containing error and warning messages.</li>
	<li>$userinfo - A boolean of false or an array containing user information.</li>
	<li>$ajax - A boolean that specifies if this is part of an AJAX callback.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is expected to check the user's input for 
validity  and append any messages to be displayed to the $result array. 
 This  function is called during the Generic Login update information 
process after going through the account recovery process.  The $ajax  
parameter can be used to take a slightly different path through the code
  because, generally, only one field is being checked when AJAX is used 
 on a signup form.  Modules that support both SignupCheck() and 
UpdateInfoCheck() generally call an internal function that handles both 
calls.</p>

<h3>sso_login_ModuleBase::UpdateAddInfo(&amp;$userinfo)</h3>

<p>Parameters:</p>

<ul>
	<li>$userinfo - An array containing user information.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is expected to add information to the user  
information array based on user input.  This function is called during  
the Generic Login update information process after going through the 
account recovery process.</p>

<h3>sso_login_ModuleBase::UpdateInfoDone($userid)</h3>

<p>Parameters:</p>

<ul>
	<li>$userid - An integer containing the user ID of the modified user account.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function lets a module act on a user account that has been changed in the Generic Login provider database.</p>

<h3>sso_login_ModuleBase::GenerateUpdateInfo($userrow, $userinfo)</h3>

<p>Parameters:</p>

<ul>
	<li>$userrow - An object containing user row information.</li>
	<li>$userinfo - An array containing user information.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is expected to generate fields for the user to 
view  or fill in so they can update their information.  Can also output 
Javascript.  Fields should be wrapped  using standard 'div' wrapping.  
See existing modules on how to do this  correctly.  Output is cached and
 reordered according to the module  ordering specified in the admin 
interface.</p>

<h2>Import Existing User Accounts</h2>

<p>Let's suppose you already have a large database of users and want to 
import them into the SSO server.  While this is possible, this is a 
fairly advanced task and you are somewhat on your own as far as 
programming goes.  There is some code later on in this section to give 
you an idea of how to proceed and the forums can be helpful for getting 
on the right track, but you'll still ultimately have to do your own 
thing.</p>

<p>There are several approaches you can take when dealing with the issue
 of importing users.  You'll have to first decide which one is right for
 your situation.</p>

<ul>
	<li>One option is to author a provider that allows existing users to 
sign into their existing  account.  The LDAP provider is a simple enough
 model to follow and there is plenty of documentation on the topic of 
creating a new provider.  You don't necessarily have to allow users to 
create or recover their account, just sign in.  This approach can be 
useful when your existing system's passwords are hashed or encrypted.  
The provider approach can also be an "Import old account" method that 
simply migrates their account to the Generic Login provider but doesn't 
actually sign them in.</li>
	<li>Another option is to not import anything.  Users recreate their 
account in the new system and then the application using the SSO client 
operates on e-mail addresses.  You don't have to do much to make this 
method work.  This has the added benefits of cleaning up the user 
database and when a former user signs in with their old e-mail address, 
the new account will be linked automatically to their old user 
regardless of how they arrive from the SSO server.</li>
	<li>The last option is to import accounts directly into the Generic 
Login provider.  If this approach is used with passwords that are 
already hashed or encrypted, the user will have to recover their account
 before they can access the system.  Doing that will be weird from an 
end-user perspective but you could reset their password for them and 
send it via e-mail during the import process.  If the passwords are 
plain-text, while you shouldn't have been doing that, this method will 
significantly upgrade your existing system and users will be able to 
sign in without having to recover their account.</li>
</ul>

<p>The rest of this section is dedicated to importing user accounts into the Generic Login provider.</p>

<p>The Generic Login provider is quite versatile but it is also hard to 
integrate with because of both its flexibility and the security measures
 taken to prevent a data breach.  This is intentional but it does make 
it difficult to import accounts from other systems into this provider.  
The recommended approach for importing large numbers of accounts in one 
go is to write a command-line script.  The following is an example to 
get you started.  The code is borrowed from both 'cron.php' and the 
Generic Login provider:</p>

<div class="shortcode"><div class="syntaxhighlight-wrap"><div class="syntaxhighlighter collapsed  " id="highlighter_234379"><div class="bar"><div class="toolbar"><a class="item expandSource" style="width: 16px; height: 16px;" title="show source" href="#expandSource">show source</a><a class="item viewSource" style="width: 16px; height: 16px;" title="view source" href="#viewSource">view source</a><div class="item copyToClipboard"><embed id="highlighter_234379_clipboard" type="application/x-shockwave-flash" title="copy to clipboard" allowscriptaccess="always" wmode="transparent" flashvars="highlighterId=highlighter_234379" menu="false" src="Single%20Sign-On%20Server_Client%20Documentation_files/clipboard.swf" height="16" width="16"></div><a class="item printSource" style="width: 16px; height: 16px;" title="print" href="#printSource">print</a><a class="item about" style="width: 16px; height: 16px;" title="?" href="#about">?</a></div></div><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>001</code></td><td class="content"><code class="php-tag">&lt;?php</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>002</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-function functions">define</code><code class="plain">(</code><code class="php-string string">"SSO_FILE"</code><code class="plain">, </code><code class="php-numval">1</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>003</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>004</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">// Temporary root.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>005</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-varinstr variable">$rootpath</code> <code class="php-string string">= str_replace("</code><code class="php-string string">\\"</code><code class="plain">, </code><code class="php-string string">"/"</code><code class="plain">, </code><code class="php-function functions">dirname</code><code class="plain">(</code><code class="php-constant constants">__FILE__</code><code class="plain">));</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>006</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>007</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">require_once</code> <code class="php-variable variable">$rootpath</code> <code class="plain">. </code><code class="php-string string">"/config.php"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>008</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">require_once</code> <code class="plain">SSO_ROOT_PATH . </code><code class="php-string string">"/"</code> <code class="plain">. SSO_SUPPORT_PATH . </code><code class="php-string string">"/debug.php"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>009</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">require_once</code> <code class="plain">SSO_ROOT_PATH . </code><code class="php-string string">"/"</code> <code class="plain">. SSO_SUPPORT_PATH . </code><code class="php-string string">"/str_basics.php"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>010</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">require_once</code> <code class="plain">SSO_ROOT_PATH . </code><code class="php-string string">"/"</code> <code class="plain">. SSO_SUPPORT_PATH . </code><code class="php-string string">"/page_basics.php"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>011</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">require_once</code> <code class="plain">SSO_ROOT_PATH . </code><code class="php-string string">"/"</code> <code class="plain">. SSO_SUPPORT_PATH . </code><code class="php-string string">"/sso_functions.php"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>012</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">require_once</code> <code class="plain">SSO_ROOT_PATH . </code><code class="php-string string">"/"</code> <code class="plain">. SSO_SUPPORT_PATH . </code><code class="php-string string">"/random.php"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>013</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>014</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">// Initialize language settings.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>015</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-custfunc functions">BB_InitLangmap</code><code class="plain">(SSO_ROOT_PATH . </code><code class="php-string string">"/"</code> <code class="plain">. SSO_LANG_PATH . </code><code class="php-string string">"/"</code><code class="plain">, SSO_DEFAULT_LANG);</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>016</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-custfunc functions">BB_SetLanguage</code><code class="plain">(SSO_ROOT_PATH . </code><code class="php-string string">"/"</code> <code class="plain">. SSO_LANG_PATH . </code><code class="php-string string">"/"</code><code class="plain">, SSO_ADMIN_LANG);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>017</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>018</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">// Initialize the global CSPRNG instance.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>019</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-variable variable">$sso_rng</code> <code class="plain">= </code><code class="php-keyword keyword">new</code> <code class="php-custfunc functions">CSPRNG</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>020</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>021</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">// Connect to the database and generate database globals.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>022</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-custfunc functions">SSO_DBConnect</code><code class="plain">(</code><code class="php-keyword keyword">true</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>023</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>024</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">// Load in fields without admin select.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>025</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-custfunc functions">SSO_LoadFields</code><code class="plain">(</code><code class="php-keyword keyword">false</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>026</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>027</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">// Load in $sso_settings and initialize it.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>028</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-custfunc functions">SSO_LoadSettings</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>029</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>030</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">// Load the SMTP functions so e-mail addresses can be verified.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>031</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-function functions">define</code><code class="plain">(</code><code class="php-string string">"CS_TRANSLATE_FUNC"</code><code class="plain">, </code><code class="php-string string">"BB_Translate"</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>032</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">require_once</code> <code class="plain">SSO_ROOT_PATH . </code><code class="php-string string">"/"</code> <code class="plain">. SSO_SUPPORT_PATH . </code><code class="php-string string">"/smtp.php"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>033</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>034</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">// Define SET_PASSWORD_MODE to one of the following:</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>035</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">//&nbsp;&nbsp; 0 = Specify the user's password via $password.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>036</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">//&nbsp;&nbsp; 1 = Generate a password for the user.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>037</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">//&nbsp;&nbsp; 2 = Force the user to use account recovery options to set a password.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>038</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-function functions">define</code><code class="plain">(</code><code class="php-string string">"SET_PASSWORD_MODE"</code><code class="plain">, </code><code class="php-numval">2</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>039</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>040</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-comment comments">// Connect to your database here and run the query to extract user accounts.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>041</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-variable variable">$numrows</code> <code class="plain">= </code><code class="php-numval">0</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>042</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-variable variable">$result</code> <code class="plain">= </code><code class="php-variable variable">$yourdb</code><code class="plain">-&gt;</code><code class="php-custfunc functions">query</code><code class="plain">(</code><code class="php-string string">"SELECT * FROM yourusers"</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>043</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="php-keyword keyword">while</code> <code class="plain">(</code><code class="php-variable variable">$row</code> <code class="plain">= </code><code class="php-variable variable">$result</code><code class="plain">-&gt;</code><code class="php-custfunc functions">getrow</code><code class="plain">())</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>044</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>045</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// Put your code here to get the username, e-mail, and (optional) password out of your database row.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>046</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$username</code> <code class="plain">= </code><code class="php-variable variable">$row</code><code class="plain">-&gt;username;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>047</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$email</code> <code class="plain">= </code><code class="php-variable variable">$row</code><code class="plain">-&gt;email;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>048</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-varinstr variable">$password</code> <code class="php-string string">= "</code><code class="php-string string">"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>049</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>050</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// Load up $mapinfo with field data.&nbsp; Keys must match field names in the server.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>051</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// Don't worry about e-mail address and username.&nbsp; Those are dealt with later.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>052</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$mapinfo</code> <code class="plain">= </code><code class="php-keyword keyword">array</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>053</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>054</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// Do not modify anything below this line unless you really know what you are doing.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>055</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(</code><code class="php-variable variable">$sso_settings</code><code class="plain">[</code><code class="php-string string">"sso_login"</code><code class="plain">][</code><code class="php-string string">"install_type"</code><code class="plain">] == </code><code class="php-string string">"email_username"</code> <code class="plain">|| </code><code class="php-variable variable">$sso_settings</code><code class="plain">[</code><code class="php-string string">"sso_login"</code><code class="plain">][</code><code class="php-string string">"install_type"</code><code class="plain">] == </code><code class="php-string string">"email"</code><code class="plain">)</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>056</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>057</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$result2</code> <code class="plain">= SMTP::</code><code class="php-custfunc functions">MakeValidEmailAddress</code><code class="plain">(</code><code class="php-variable variable">$email</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>058</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(!</code><code class="php-variable variable">$result2</code><code class="plain">[</code><code class="php-string string">"success"</code><code class="plain">])</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>059</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>060</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">echo</code> <code class="php-custfunc functions">BB_Translate</code><code class="plain">(</code><code class="php-string string">"Invalid e-mail address.&nbsp; %s\n"</code><code class="plain">, </code><code class="php-variable variable">$email</code><code class="plain">[</code><code class="php-string string">"error"</code><code class="plain">]);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>061</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">continue</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>062</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>063</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>064</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$email</code> <code class="plain">= </code><code class="php-variable variable">$result2</code><code class="plain">[</code><code class="php-string string">"email"</code><code class="plain">];</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>065</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>066</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>067</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// Create the new user in the Generic Login database.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>068</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$userinfo</code> <code class="plain">= </code><code class="php-keyword keyword">array</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>069</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-varinstr variable">$phrase</code> <code class="php-string string">= "</code><code class="php-string string">"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>070</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">for</code> <code class="plain">(</code><code class="php-variable variable">$x</code> <code class="plain">= </code><code class="php-numval">0</code><code class="plain">; </code><code class="php-variable variable">$x</code> <code class="plain">&lt; </code><code class="php-numval">4</code><code class="plain">; </code><code class="php-variable variable">$x</code><code class="plain">++)&nbsp; </code><code class="php-variable variable">$phrase</code> <code class="plain">.= </code><code class="php-string string">" "</code> <code class="plain">. </code><code class="php-custfunc functions">SSO_GetRandomWord</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>071</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$phrase</code> <code class="plain">= </code><code class="php-function functions">preg_replace</code><code class="plain">(</code><code class="php-string string">'/\s+/'</code><code class="plain">, </code><code class="php-string string">" "</code><code class="plain">, </code><code class="php-function functions">trim</code><code class="plain">(</code><code class="php-variable variable">$phrase</code><code class="plain">));</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>072</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(SET_PASSWORD_MODE == </code><code class="php-numval">0</code><code class="plain">)&nbsp; </code><code class="php-variable variable">$phrase</code> <code class="plain">= </code><code class="php-variable variable">$password</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>073</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>074</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$salt</code> <code class="plain">= </code><code class="php-variable variable">$sso_rng</code><code class="plain">-&gt;</code><code class="php-custfunc functions">GenerateString</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>075</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$data</code> <code class="plain">= </code><code class="php-variable variable">$username</code> <code class="plain">. </code><code class="php-string string">":"</code> <code class="plain">. </code><code class="php-variable variable">$email</code> <code class="plain">. </code><code class="php-string string">":"</code> <code class="plain">. </code><code class="php-variable variable">$salt</code> <code class="plain">. </code><code class="php-string string">":"</code> <code class="plain">. </code><code class="php-variable variable">$phrase</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>076</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$userinfo</code><code class="plain">[</code><code class="php-string string">"extra"</code><code class="plain">] = </code><code class="php-variable variable">$sso_rng</code><code class="plain">-&gt;</code><code class="php-custfunc functions">GenerateString</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>077</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(SET_PASSWORD_MODE == </code><code class="php-numval">0</code> <code class="plain">|| SET_PASSWORD_MODE == </code><code class="php-numval">1</code><code class="plain">)</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>078</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>079</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$passwordinfo</code> <code class="plain">= Blowfish::</code><code class="php-custfunc functions">Hash</code><code class="plain">(</code><code class="php-variable variable">$data</code><code class="plain">, </code><code class="php-variable variable">$sso_settings</code><code class="plain">[</code><code class="php-string string">"sso_login"</code><code class="plain">][</code><code class="php-string string">"password_minrounds"</code><code class="plain">], </code><code class="php-variable variable">$sso_settings</code><code class="plain">[</code><code class="php-string string">"sso_login"</code><code class="plain">][</code><code class="php-string string">"password_mintime"</code><code class="plain">]);</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>080</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(!</code><code class="php-variable variable">$passwordinfo</code><code class="plain">[</code><code class="php-string string">"success"</code><code class="plain">])&nbsp; </code><code class="php-custfunc functions">BB_SetPageMessage</code><code class="plain">(</code><code class="php-string string">"error"</code><code class="plain">, </code><code class="php-string string">"Unexpected cryptography error."</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>081</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">else</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>082</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>083</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$userinfo</code><code class="plain">[</code><code class="php-string string">"salt"</code><code class="plain">] = </code><code class="php-variable variable">$salt</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>084</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$userinfo</code><code class="plain">[</code><code class="php-string string">"rounds"</code><code class="plain">] = (int)</code><code class="php-variable variable">$passwordinfo</code><code class="plain">[</code><code class="php-string string">"rounds"</code><code class="plain">];</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>085</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$userinfo</code><code class="plain">[</code><code class="php-string string">"password"</code><code class="plain">] = </code><code class="php-function functions">bin2hex</code><code class="plain">(</code><code class="php-variable variable">$passwordinfo</code><code class="plain">[</code><code class="php-string string">"hash"</code><code class="plain">]);</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>086</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>087</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">echo</code> <code class="php-custfunc functions">BB_Translate</code><code class="plain">(</code><code class="php-string string">"Initial password for '%s' - '%s' has been set to '%s'.\n"</code><code class="plain">, </code><code class="php-variable variable">$username</code><code class="plain">, </code><code class="php-variable variable">$email</code><code class="plain">, </code><code class="php-variable variable">$phrase</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>088</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>089</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>090</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">else</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>091</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>092</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-varinstr variable">$userinfo</code><code class="php-string string">["</code><code class="plain">salt</code><code class="php-string string">"] = "</code><code class="php-string string">"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>093</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$userinfo</code><code class="plain">[</code><code class="php-string string">"rounds"</code><code class="plain">] = </code><code class="php-numval">0</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>094</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-varinstr variable">$userinfo</code><code class="php-string string">["</code><code class="plain">password</code><code class="php-string string">"] = "</code><code class="php-string string">"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>095</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>096</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>097</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$sso_db_sso_login_users</code> <code class="plain">= SSO_DB_PREFIX . </code><code class="php-string string">"p_sso_login_users"</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>098</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$userinfo2</code> <code class="plain">= </code><code class="php-custfunc functions">SSO_EncryptDBData</code><code class="plain">(</code><code class="php-variable variable">$userinfo</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>099</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>100</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">try</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>101</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>102</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(</code><code class="php-variable variable">$sso_settings</code><code class="plain">[</code><code class="php-string string">"sso_login"</code><code class="plain">][</code><code class="php-string string">"install_type"</code><code class="plain">] == </code><code class="php-string string">"email_username"</code><code class="plain">)</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>103</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>104</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$sso_db</code><code class="plain">-&gt;</code><code class="php-custfunc functions">Query</code><code class="plain">(</code><code class="php-string string">"INSERT"</code><code class="plain">, </code><code class="php-keyword keyword">array</code><code class="plain">(</code><code class="php-variable variable">$sso_db_sso_login_users</code><code class="plain">, </code><code class="php-keyword keyword">array</code><code class="plain">(</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>105</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-string string">"username"</code> <code class="plain">=&gt; </code><code class="php-variable variable">$username</code><code class="plain">,</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>106</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-string string">"email"</code> <code class="plain">=&gt; </code><code class="php-variable variable">$email</code><code class="plain">,</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>107</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-string string">"verified"</code> <code class="plain">=&gt; (int)</code><code class="php-variable variable">$verified</code><code class="plain">,</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>108</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-string string">"created"</code> <code class="plain">=&gt; CSDB::</code><code class="php-custfunc functions">ConvertToDBTime</code><code class="plain">(</code><code class="php-function functions">time</code><code class="plain">()),</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>109</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-string string">"info"</code> <code class="plain">=&gt; </code><code class="php-variable variable">$userinfo2</code><code class="plain">,</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>110</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">), </code><code class="php-string string">"AUTO INCREMENT"</code> <code class="plain">=&gt; </code><code class="php-string string">"id"</code><code class="plain">));</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>111</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>112</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">else if</code> <code class="plain">(</code><code class="php-variable variable">$sso_settings</code><code class="plain">[</code><code class="php-string string">"sso_login"</code><code class="plain">][</code><code class="php-string string">"install_type"</code><code class="plain">] == </code><code class="php-string string">"email"</code><code class="plain">)</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>113</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>114</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$sso_db</code><code class="plain">-&gt;</code><code class="php-custfunc functions">Query</code><code class="plain">(</code><code class="php-string string">"INSERT"</code><code class="plain">, </code><code class="php-keyword keyword">array</code><code class="plain">(</code><code class="php-variable variable">$sso_db_sso_login_users</code><code class="plain">, </code><code class="php-keyword keyword">array</code><code class="plain">(</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>115</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-string string">"email"</code> <code class="plain">=&gt; </code><code class="php-variable variable">$email</code><code class="plain">,</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>116</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-string string">"verified"</code> <code class="plain">=&gt; (int)</code><code class="php-variable variable">$verified</code><code class="plain">,</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>117</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-string string">"created"</code> <code class="plain">=&gt; CSDB::</code><code class="php-custfunc functions">ConvertToDBTime</code><code class="plain">(</code><code class="php-function functions">time</code><code class="plain">()),</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>118</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-string string">"info"</code> <code class="plain">=&gt; </code><code class="php-variable variable">$userinfo2</code><code class="plain">,</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>119</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">), </code><code class="php-string string">"AUTO INCREMENT"</code> <code class="plain">=&gt; </code><code class="php-string string">"id"</code><code class="plain">));</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>120</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>121</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">else if</code> <code class="plain">(</code><code class="php-variable variable">$sso_settings</code><code class="plain">[</code><code class="php-string string">"sso_login"</code><code class="plain">][</code><code class="php-string string">"install_type"</code><code class="plain">] == </code><code class="php-string string">"username"</code><code class="plain">)</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>122</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>123</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$sso_db</code><code class="plain">-&gt;</code><code class="php-custfunc functions">Query</code><code class="plain">(</code><code class="php-string string">"INSERT"</code><code class="plain">, </code><code class="php-keyword keyword">array</code><code class="plain">(</code><code class="php-variable variable">$sso_db_sso_login_users</code><code class="plain">, </code><code class="php-keyword keyword">array</code><code class="plain">(</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>124</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-string string">"username"</code> <code class="plain">=&gt; </code><code class="php-variable variable">$username</code><code class="plain">,</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>125</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-string string">"created"</code> <code class="plain">=&gt; CSDB::</code><code class="php-custfunc functions">ConvertToDBTime</code><code class="plain">(</code><code class="php-function functions">time</code><code class="plain">()),</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>126</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-string string">"info"</code> <code class="plain">=&gt; </code><code class="php-variable variable">$userinfo2</code><code class="plain">,</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>127</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">), </code><code class="php-string string">"AUTO INCREMENT"</code> <code class="plain">=&gt; </code><code class="php-string string">"id"</code><code class="plain">));</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>128</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>129</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">else</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>130</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>131</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">echo</code> <code class="php-custfunc functions">BB_Translate</code><code class="plain">(</code><code class="php-string string">"Fatal error:&nbsp; Login system is broken.\n"</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>132</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-function functions">exit</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>133</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>134</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>135</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$userid</code> <code class="plain">= </code><code class="php-variable variable">$sso_db</code><code class="plain">-&gt;</code><code class="php-custfunc functions">GetInsertID</code><code class="plain">();</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>136</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>137</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$userrow</code> <code class="plain">= </code><code class="php-variable variable">$sso_db</code><code class="plain">-&gt;</code><code class="php-custfunc functions">GetRow</code><code class="plain">(</code><code class="php-string string">"SELECT"</code><code class="plain">, </code><code class="php-keyword keyword">array</code><code class="plain">(</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>138</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-string string">"*"</code><code class="plain">,</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>139</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-string string">"FROM"</code> <code class="plain">=&gt; </code><code class="php-string string">"?"</code><code class="plain">,</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>140</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-string string">"WHERE"</code> <code class="plain">=&gt; </code><code class="php-string string">"id = ?"</code><code class="plain">,</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>141</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">), </code><code class="php-variable variable">$sso_db_sso_login_users</code><code class="plain">, </code><code class="php-variable variable">$userid</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>142</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>143</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">catch (Exception </code><code class="php-variable variable">$e</code><code class="plain">)</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>144</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>145</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">echo</code> <code class="php-custfunc functions">BB_Translate</code><code class="plain">(</code><code class="php-string string">"Database query error.&nbsp; %s\n"</code><code class="plain">, </code><code class="php-variable variable">$e</code><code class="plain">-&gt;</code><code class="php-custfunc functions">getMessage</code><code class="plain">());</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>146</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">continue</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>147</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>148</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>149</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-comment comments">// Activate the user.</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>150</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(</code><code class="php-variable variable">$sso_settings</code><code class="plain">[</code><code class="php-string string">"sso_login"</code><code class="plain">][</code><code class="php-string string">"install_type"</code><code class="plain">] == </code><code class="php-string string">"email_username"</code> <code class="plain">|| </code><code class="php-variable variable">$sso_settings</code><code class="plain">[</code><code class="php-string string">"sso_login"</code><code class="plain">][</code><code class="php-string string">"install_type"</code><code class="plain">] == </code><code class="php-string string">"email"</code><code class="plain">)&nbsp; </code><code class="php-variable variable">$mapinfo</code><code class="plain">[</code><code class="php-variable variable">$sso_settings</code><code class="plain">[</code><code class="php-string string">"sso_login"</code><code class="plain">][</code><code class="php-string string">"map_email"</code><code class="plain">]] = </code><code class="php-variable variable">$userrow</code><code class="plain">-&gt;email;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>151</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-keyword keyword">if</code> <code class="plain">(</code><code class="php-variable variable">$sso_settings</code><code class="plain">[</code><code class="php-string string">"sso_login"</code><code class="plain">][</code><code class="php-string string">"install_type"</code><code class="plain">] == </code><code class="php-string string">"email_username"</code> <code class="plain">|| </code><code class="php-variable variable">$sso_settings</code><code class="plain">[</code><code class="php-string string">"sso_login"</code><code class="plain">][</code><code class="php-string string">"install_type"</code><code class="plain">] == </code><code class="php-string string">"username"</code><code class="plain">)&nbsp; </code><code class="php-variable variable">$mapinfo</code><code class="plain">[</code><code class="php-variable variable">$sso_settings</code><code class="plain">[</code><code class="php-string string">"sso_login"</code><code class="plain">][</code><code class="php-string string">"map_username"</code><code class="plain">]] = </code><code class="php-variable variable">$userrow</code><code class="plain">-&gt;username;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>152</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>153</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-custfunc functions">SSO_ActivateUser</code><code class="plain">(</code><code class="php-variable variable">$userrow</code><code class="plain">-&gt;id, </code><code class="php-variable variable">$userinfo</code><code class="plain">[</code><code class="php-string string">"extra"</code><code class="plain">], </code><code class="php-variable variable">$mapinfo</code><code class="plain">, </code><code class="php-keyword keyword">false</code><code class="plain">, </code><code class="php-keyword keyword">false</code><code class="plain">);</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>154</code></td><td class="content">&nbsp;</td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>155</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="php-variable variable">$numrows</code><code class="plain">++;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>156</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="plain">}</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>157</code></td><td class="content"><code class="php-tag">?&gt;</code></td></tr></tbody></table></div></div></div></div></div>

<p>The code is fairly well written with comments.  It should be easy to 
use it as a good baseline starting point and make the necessary 
modifications to integrate with an existing system to import and 
activate accounts.  This script is intended to be run from the SSO 
server root from a command-line.</p>

<h2>Porting the SSO Client</h2>

<p>The SSO server is written in PHP and likely won't be ported to 
another language.  It is big, complex, and has a lot of PHP-specific 
stuff in it and is intended to be installed standalone.  The SSO client,
 however, is intended to be lightweight and relatively easy to port to 
other languages.  This section aims to be a guide to porting the SSO 
client.</p>

<p>The SSO client has four primary responsibilities:  Staying out of the
  way of someone integrating with it (i.e. avoiding naming conflicts),  
exposing classes and functions to the user that make sense, 
communicating with the  SSO server endpoint and correctly processing 
replies including dealing with server  outages, and managing everything 
in a secure fashion while being bandwidth-friendly (e.g. encrypting 
certain  cookies while minimizing cookie length).</p>

<p>In theory, the SSO client can be ported by following a similar naming
 convention to the existing PHP code and doing a one-to-one port.  
However, each language is different and nice language features like 
"optional parameters" or "passing arrays/maps as a parameter" may not be
 possible or behave differently.  Try to maintain similarities when 
naming variables and functions as much as possible.</p>

<p>The most difficult part of porting the SSO client will be 
communication with the SSO server.  The endpoint expects communication 
to be single or dual encrypted using either the Blowfish or AES-256 
cipher all with a specialized packet interface.  Both the server and 
client know the shared secret used to encrypt the underlying data, which
 contains information on which encryption method is expected.  You will 
either need to use native cipher implementations (rare) or find or write
 a library with the correct implementation and then write a couple of 
packet wrapper routines that perform identically to the PHP 
encrypt/decrypt packet routines.  You will also need a JSON encoder and 
decoder, which any rational, modern, competent language has.  You will 
also need to create a way to obtain secure random bytes of data and may 
want to port part of the CSPRNG that comes with the SSO client to make 
life easier for the rest of the port.</p>

<h2>Endpoint API</h2>

<p>The SSO server endpoint serves as the initiator of all things related
 to the SSO server and the only method by which a SSO client can use to 
talk directly to the SSO server.  The endpoint API is an important 
aspect of all SSO server related communication.  This section is really 
only relevant to those implementing custom endpoint API extensions to 
the SSO server and those porting the SSO client to other languages.</p>

<p>Access to the endpoint API is, by default, restricted to those who 
know the endpoint API URL, have a valid API key, and are accessing the 
endpoint API from a matching IP address according to the API key's IP 
address pattern restrictions.  The endpoint also supports hooks in a 
couple of locations but is fairly limited.  The actions listed below are
 reserved for the SSO server and can't be used in the 
EndpointHook_CustomHandler() callback.</p>

<p>The endpoint API will return errors to the client whenever a 
situation is encountered that is deemed a failure condition.  Most error
 messages are encrypted but it is possible to get back an unencrypted 
response (e.g. an invalid API key or the wrong version of the SSO client
 is being used).  The SSO client is responsible for handling both 
scenarios.  All communication is done with encoded JSON objects.</p>

<p>Once an API key has been validated and loaded, the next step is to 
locate the correct 'action', verify that the API key is allowed to 
perform that action, and then execute the action.  What follows is the 
list of available endpoint API actions.</p>

<h3>Action:  'test'</h3>

<p>API key types:  normal, remote, custom</p>

<p>Inputs:  None</p>

<p>Returns:</p>

<ul>
	<li>success - A boolean value of true.</li>
</ul>

<p>This action is used by the SSO client installer to verify that the 
endpoint API URL and API key and secret are working as expected.  
Diagnosing these issues post-installation is a bit more difficult.</p>

<h3>Action:  'initlogin'</h3>

<p>API key type:  normal</p>

<p>Inputs:</p>

<ul>
	<li>url - An optional string containing the URL to return to once the user is activated and validated.</li>
	<li>files - An optional integer specifying whether or not files were 
uploaded as part of the request.  This will display a warning to the 
user that uploaded files were lost when the browser is redirected to the
 sign in page.</li>
	<li>initmsg - An optional string to display to the user.  If the string
 is 'insufficient_permissions', the behavior of the server changes so 
that an infinite loop doesn't occur.</li>
	<li>extra - An optional object of key-value pairs used as part of the return URL.</li>
	<li>info - An optional string, preferably encrypted, containing data to return to the client later when it supplies the recovery ID.</li>
</ul>

<p>Returns:</p>

<ul>
	<li>success - A boolean value of true.</li>
	<li>url - A string containing the URL that the client should redirect to.</li>
	<li>rid - A string containing the recovery ID.</li>
</ul>

<p>This action is used by the SSO client to initiate a sign in.  The SSO
 client is expected to save the recovery ID to retrieve 'info' later and
 then redirect the browser to the returned URL.</p>

<h3>Action:  'setlogin'</h3>

<p>API key type:  remote</p>

<p>Inputs:</p>

<ul>
	<li>sso_id - A string containing the session ID.</li>
	<li>token - A string containing the validation token.</li>
	<li>user_id - A string containing the user ID.</li>
	<li>updateinfo - A string containing a JSON encoded object that contains field mapping information.</li>
</ul>

<p>Returns:</p>

<ul>
	<li>success - A boolean value of true.</li>
	<li>url - A string containing the URL that the client should redirect to.</li>
</ul>

<p>This action is used by the SSO client to authorize a remote sign in. 
 The SSO client is expected to redirect the browser to the returned URL.
  See the remote provider for details.</p>

<h3>Action:  'getlogin'</h3>

<p>API key type:  normal</p>

<p>Inputs:</p>

<ul>
	<li>sso_id - A string containing a session ID or temporary session token.</li>
	<li>expires - An integer containing the number of seconds a session is valid for.</li>
	<li>updateinfo - An optional string containing a JSON encoded object that contains field mapping information.</li>
	<li>delete_old - An optional integer that specifies whether or not the original session should be deleted.</li>
	<li>sso_id2 - An optional string containing the previous session ID.</li>
	<li>rid - A string containing the recovery ID.</li>
</ul>

<p>Returns:</p>

<ul>
	<li>success - A boolean value of true.</li>
	<li>sso_id - A string containing the session ID.</li>
	<li>id - A string containing the user ID.</li>
	<li>extra - A string containing a constant base token for the user that is intended for use in security nonce calculations.</li>
	<li>field_map - An object containing the field map for the user and API key.</li>
	<li>writable - An object containing a list of writable fields.</li>
	<li>tag_map - An object containing a list of mapped tags associated with the user.</li>
	<li>admin - A boolean that specifies whether or not the user is a site admin.</li>
	<li>rinfo - A string containing the data to return to the client that was submitted with 'initlogin'.</li>
</ul>

<p>This action retrieves user sign in information and request recovery 
information that was sent when the 'initlogin' action was called.  When 
'delete_old' is specified, the returned object only contains 'success' 
and is intended to be executed shortly after the first request returns 
so that the original session information is deleted from the SSO server.
  When 'sso_id2' and 'rid' are specified, the original recovery data is 
returned via 'rinfo' and the real session ID via 'sso_id'.  The SSO 
client is responsible for restoring the state of the application as best
 as possible to the original state so that processing may continue where
 it left off when the original redirect happened to avoid data loss 
since data loss results in frustrated users.</p>

<p>Ideally, this action is called twice by the SSO client:  The first 
call is to retrieve the user's sign in information and application 
recovery information.  The second call is to delete the original session
 off the server and therefore secure the sign in.  Two steps are 
necessary because a correctly written SSO client will try an operation 
multiple times to counteract any server communication failures because 
failures do happen.  The SSO client should never reveal the real session
 ID across the wire.</p>

<h3>Action:  'logout'</h3>

<p>API key type:  normal</p>

<p>Inputs:</p>

<ul>
	<li>sso_id - A string containing a session ID.</li>
</ul>

<p>Returns:</p>

<ul>
	<li>success - A boolean value of true.</li>
</ul>

<p>This action signs out the user from the SSO server across all sign 
ins within the same namespace as the session specified by sso_id.</p>

<h2>SSO Server/Client Reserved Variables</h2>

<p>To minimize naming conflicts, the SSO server and client have very 
specific naming conventions so as to not interfere with the proper 
operation of applications, each other, and the various providers.  There
 is a lot to the core system, so avoiding conflicts is a bit difficult.</p>

<p>This section of documentation deviates a bit from the method I used 
for Barebones CMS and the rules for the naming convention are a bit more
 lax.</p>

<p>First up is the '$sso_' variable name prefix.  This prefix is 
reserved for official SSO server and client use.  Do not use the prefix 
for global variable names for providers.  Do not access these variables 
directly from a SSO client except if you need to display the contents to
 debug some specific issue.</p>

<p>Next is the '$bb_' variable name prefix.  The SSO server utilizes Admin Pack, so this prefix is also reserved.</p>

<p>When creating global variable names for providers, prefix them with 
'$g_' for throwaway variables - that is, you don't care if another 
provider replaces it later.  If you need a permanent global, use a 
'$g_providername_' prefix.  In general, correctly written providers will
 not need global variables.</p>

<p>Both the SSO server and client have a set of define()'d constants.  
These are carefully constructed so they won't conflict with each other 
as well as third-party applications such that there is seamless 
integration.  The constants are defined in 'config.php', which is 
generated by each installer.</p>

<p>What follows is a breakdown of each '$sso_' prefix variable in the SSO server, its type, and what it is for:</p>

<ul>
	<li>$sso_db - The database class instance for running queries.</li>
	<li>$sso_db_apikeys - A string containing the table name for running API key queries.</li>
	<li>$sso_db_fields - A string containing the table name for running field information queries.</li>
	<li>$sso_db_users - A string containing the table name for running user information queries.</li>
	<li>$sso_db_user_tags  - A string containing the table name for running user tag information queries.</li>
	<li>$sso_db_user_sessions - A string containing the table name for running user session information queries.</li>
	<li>$sso_db_temp_sessions - A string containing the table name for running temporary session information queries.</li>
	<li>$sso_db_tags - A string containing the table name for running tag information queries.</li>
	<li>$sso_db_ipcache - A string containing the table name for running IP address cache information queries.</li>
	<li>$sso_fields - An array containing key-value pairs for identifying 
enabled fields (key) and whether or not the field is encrypted (value).</li>
	<li>$sso_select_fields - An array containing key-value pairs for displaying select dropdowns used throughout the admin interface.</li>
	<li>$sso_settings - An array containing the global configuration, including provider configurations.</li>
	<li>$sso_randomwords - An array containing internal information about 
the dictionary for exclusive use by the SSO_GetRandomWord() function.</li>
	<li>$sso_namespaces - An array containing possibly validated sessions in the various namespaces that have been signed into.</li>
	<li>$sso_rng - An instance of the CSPRNG class.</li>
	<li>$sso_ipaddr - An array containing normalized information about the remote IP address for use with IP address related operations.</li>
	<li>$bb_usertoken - A string containing a valid user token.  Required 
to be set by 'admin_hook.php' for access to the admin interface.</li>
	<li>$sso_site_admin - A boolean indicating whether or not the user has access to the full admin interface or just a subset.</li>
	<li>$sso_user_id - An optional integer that defines a SSO server user 
ID of the user in the admin interface for identifying who did what.  
Generally only useful for larger organizations where multiple users have
 the SSO site admin privilege and the SSO client is used to sign in to 
the admin interface.</li>
	<li>$sso_menuopts - An array containing menu options for passing to Admin Pack to generate the navigation for the admin interface.</li>
	<li>$sso_providers - An array of key-value pairs that map an internal provider name to an instance of the provider.</li>
	<li>$sso_provider - A string containing an internal provider name.</li>
	<li>$sso_header - A string containing the header for the end user interface.  Obtained by capturing the output of 'header.php'.</li>
	<li>$sso_footer - A string containing the footer for the end user interface.  Obtained by capturing the output of 'footer.php'.</li>
	<li>$sso_apirow - An object containing raw database API key information.</li>
	<li>$sso_apikey_info - An array containing extracted API key information.</li>
	<li>$sso_session_id - An array containing two elements - a string and an integer - for identifying a session.</li>
	<li>$sso_sessionrow - An object containing raw database session information.</li>
	<li>$sso_session_info - An array containing extracted session information.</li>
	<li>$sso_session_id2 - An array containing two elements - a string and an integer - for identifying a second session.</li>
	<li>$sso_sessionrow2 - An object containing raw database second session information.</li>
	<li>$sso_session_info2 - An array containing extracted second session information.</li>
	<li>$sso_protectedfields - An array containing provider protected SSO field mapping information.</li>
	<li>$sso_automate - A boolean that specifies if the validation step should be bypassed if possible.</li>
	<li>$sso_userrow - An object containing raw database user information.</li>
	<li>$sso_user_info - An array containing decrypted user information.</li>
	<li>$sso_missingfields - An array containing calculated missing fields for use by an 'index_hook.php' script.</li>
	<li>$sso_target_url - A string containing a base URL for conveniently generating URLs that have a similar target.</li>
	<li>$sso_selectors_url - A string containing a URL to use to return to the selection screen when multiple providers are available.</li>
</ul>

<p>Since Admin Pack is in use, standard Admin Pack variables are also 
available but mostly for internal use only.  The only exception is 
$bb_usertoken documented above.</p>

<p>The list of globals above are not exhaustive but the listed variables
 should be sufficient enough coverage for nearly all development 
purposes.</p>

<p>What follows is a breakdown of the '$sso_' prefix variable in the SSO client, its type, and what it is for:</p>

<ul>
	<li>$sso_removekeys - An array containing names of $_GET options that 
should be removed if they appear for the signed in user.  This array 
should be defined by the application before including the 
'client/functions.php' file.  The SSO client will automatically redirect
 the browser to a URL without the specified options.</li>
	<li>$sso__client - An instance of the 'SSO_Client' class that gets created when the 'client/functions.php' file is included.</li>
</ul>

<p>With the sole exception of $sso_removekeys, these variables are for 
internal use only and should never be used by an application except for 
debugging issues.  The names used by the SSO client might be modified in
 the future to help make them more unique since there is a chance some 
application out there might use them, the SSO client would replace those
 variables, and the universe would subsequently implode.</p>

<h2>SSO Server Functions</h2>

<p>The SSO server has a number of functions available that make common tasks easier.  Since the SSO server uses <a href="https://barebonescms.com/documentation/admin_pack/">Admin Pack</a>,
 all the functions for Admin Pack are available in addition to the 
server functions.  The SSO server also uses a number of other baseline 
Barebones CMS components in the 'support' directory that are documented 
in the <a href="https://barebonescms.com/documentation/extra_components/">Extra Components</a> documentation.</p>

<p>Most functions begin with the prefix of 'SSO_'.  This is a reserved prefix.</p>

<p>The available functions below are broken down by the file they are 
defined in.  If the file is not specified, the function appears in 
'support/sso_functions.php'  Without further ado, here are the SSO 
server functions:</p>

<h3>admin.php:  SSO_CreateConfigURL($action2, $extra = array())</h3>

<p>Parameters:</p>

<ul>
	<li>$action2 - A string containing the 'action2' to execute.</li>
	<li>$extra - An array containing extra query string parameters in name 
=&gt; value pairs. Each value must be a string. (Default is array()).</li>
</ul>

<p>Returns:  A string containing a URL to the target configuration page.</p>

<p>Defined in 'admin.php'.  This function is for a provider to easily 
generate a URL that gets to the correct page of the provider 
configuration.</p>

<h3>admin.php:  SSO_CreateConfigLink($title, $action2, $extra = array(), $confirm = "")</h3>

<p>Parameters:</p>

<ul>
	<li>$title - A string containing the text to display to the user.</li>
	<li>$action2 - A string containing the 'action2' to execute.</li>
	<li>$extra - An array containing extra query string parameters in name 
=&gt; value pairs. Each value must be a string. (Default is array()).</li>
	<li>$confirm - A string to display in a confirmation dialog before continuing.  Useful for confirming deletions.  (Default is "").</li>
</ul>

<p>Returns:  A string containing a hyperlink to the target configuration page.  Includes surrounding 'a' tags.</p>

<p>Defined in 'admin.php'.  This function is similar to SSO_CreateConfigURL() but surrounds the link in HTML 'a' tags.</p>

<h3>admin.php:  SSO_ConfigRedirect($action2, $extra = array(), $msgtype = "", $msg = "")</h3>

<p>Parameters:</p>

<ul>
	<li>$action2 - A string containing the 'action2' to execute.</li>
	<li>$extra - An array containing extra query string parameters in name 
=&gt; value pairs. Each value must be a string. (Default is array()).</li>
	<li>$msgtype - A string containing one of 'error', 'success', or 'info' (Default is "").</li>
	<li>$msg - A string containing a message to display to the user on the redirected page (Default is "").</li>
</ul>

<p>Returns:  Nothing.</p>

<p>Defined in 'admin.php'.  This function is similar to 
SSO_CreateConfigURL() but performs a redirect to the URL with an 
optional Admin Pack message.</p>

<h3>endpoint.php:  SSO_EndpointOutput($result)</h3>

<p>Parameters:</p>

<ul>
	<li>$result - An array containing the data to send to the client.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>Defined in 'endpoint.php'.  This function outputs the $result in JSON
 format, possibly encrypted using the shared secret, then exits.</p>

<h3>endpoint.php:  SSO_EndpointError($msg, $info = "")</h3>

<p>Parameters:</p>

<ul>
	<li>$msg - A string containing the error message that may be displayed to the user.</li>
	<li>$info - A string containing additional information about the error that should only be used for debugging purposes.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>Defined in 'endpoint.php'.  This function outputs an error result using the SSO_EndpointOutput() function.</p>

<h3>index.php:  SSO_DisplayError($msg)</h3>

<p>Parameters:</p>

<ul>
	<li>$msg - A string containing the error message to display to the user.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>Defined in 'index.php'.  This function outputs the error message and exits.</p>

<h3>index.php:  SSO_OutputHeartbeat()</h3>

<p>Parameters:  None.</p>

<p>Returns:  Nothing.</p>

<p>Defined in 'index.php'. This function outputs the Javascript logic 
for the AJAX heartbeat that keeps the temporary server session alive for
 the maximum configured amount of time.  Without the heartbeat, the 
temporary session usually expires in 30 minutes.</p>

<h3>index.php:  SSO_FrontendField($name)</h3>

<p>Parameters:</p>

<ul>
	<li>$name - A string containing a human-readable name.</li>
</ul>

<p>Returns:  A string containing a hashed name based on a random seed, session ID, API key, and $name.</p>

<p>Defined in 'index.php'. This function takes the usual human-readable 
name and turns it into a hashed name.  Designed for use in forms that 
users fill out.  Nearly transparent to the average user but introduces a
 serious problem for bots.</p>

<p>This function introduces minor hash collision issues.  It is 
theoretically possible that two different $name values will hash to the 
same result for the same session ID and API key.</p>

<h3>index.php:  SSO_FrontendFieldValue($name, $default = false)</h3>

<p>Parameters:</p>

<ul>
	<li>$name - A string containing a human-readable name.</li>
	<li>$default - The value that will be the default if the name can't be found (Default is false).</li>
</ul>

<p>Returns:  A UTF-8 encoded string if the hashed name exists in $_REQUEST, otherwise $default.</p>

<p>Defined in 'index.php'.  This function locates the 
SSO_FrontendField() hashed name in $_REQUEST and returns it if it 
exists, otherwise it returns the value of $default.  A convenient 
function to deal with retrieving data from a submitted form that used 
SSO_FrontendField() to generate names.</p>

<h3>SSO_IsSSLRequest()</h3>

<p>Parameters:  None.</p>

<p>Returns:  A boolean of true if the browser is loading the page via SSL, false otherwise.</p>

<p>This function is a clone of BB_IsSSLRequest() for the endpoint to utilize in order to keep RAM usage down a bit.</p>

<h3>SSO_GetRemoteIP()</h3>

<p>Parameters:  None.</p>

<p>Returns:  An array containing normalized IP address information.</p>

<p>This function normalizes the incoming IP address for various 
operations such as checking whitelists and DNSRBLs.  This is the result 
of a IPAddr::GetRemoteIP() call that includes any trusted proxies.</p>

<h3>SSO_GetSupportedDatabases()</h3>

<p>Parameters:  None.</p>

<p>Returns:  An array containing information about supported databases.</p>

<p>This function is used by the installer and SSO_DBConnect() to 
determine allowed database types and the generic features that those 
databases support.  The returned array will generally mirror supported 
CSDB databases.</p>

<h3>SSO_DBConnect($full)</h3>

<p>Parameters:</p>

<ul>
	<li>$full - A boolean that indicates whether or not to load the full database class.</li>
</ul>

<p>Returns:  Nothing but throws an exception on error.</p>

<p>This function initializes the database connection and the various 
'$sso_db_...' global variables to be able to run queries against the 
database.  The admin, cron, install, and upgrade code loads the full 
CSDB database class.  The endpoint and frontend load the 'lite' version 
for reduced memory usage.</p>

<h3>SSO_LoadFields($loadselect)</h3>

<p>Parameters:</p>

<ul>
	<li>$loadselect - A boolean that indicates whether or not the dropdown select for the admin interface should be loaded.</li>
</ul>

<p>Returns:  A boolean of true if it succeeds, false otherwise.</p>

<p>This function loads in the enabled fields into $sso_fields as well as
 the encryption status of each field.  If $loadselect is true, 
$sso_select_fields is set with the options for the SSO field mapping 
dropdowns used by providers.</p>

<h3>SSO_GenerateNamespaceKeys()</h3>

<p>Parameters:  None.</p>

<p>Returns:  Nothing.</p>

<p>This function resets the namespace keys and initialization vectors.  
The caller still has to call SSO_SaveSettings() to apply the changes.</p>

<h3>SSO_LoadSettings()</h3>

<p>Parameters:  None.</p>

<p>Returns:  Nothing.</p>

<p>This function loads in the SSO server settings array and sets defaults if necessary.</p>

<h3>SSO_CreatePHPStorageData($data)</h3>

<p>Parameters:</p>

<ul>
	<li>$data - A generic variable to prepare for saving to a file.</li>
</ul>

<p>Returns:  A string that is ready to be stored in a .php file assigned to a variable.</p>

<p>This function prepares variables to save them to a file.  It uses the
  SSO_USE_LESS_SAFE_STORAGE configuration item to determine how to 
generate  the data.  When less safe storage is disabled, data is 
serialized and  then base64 encoded.  When less safe storage is enabled,
 data is  var_export()'ed.  Both methods perform about the same but the 
latter is  slightly less secure but readability is vastly improved.</p>

<h3>SSO_SaveSettings()</h3>

<p>Parameters:  None.</p>

<p>Returns:  A boolean of true if the settings were saved successfully, false otherwise.</p>

<p>This function saves the SSO server settings.</p>

<h3>SSO_GetProviderList()</h3>

<p>Parameters:  None.</p>

<p>Returns:  An array containing internal provider names.</p>

<p>This function reads the list of available providers and returns the 
directory names.  This is only preliminary information, it is up to the 
caller to do the actual loading, initialization, and perform various 
checks.</p>

<h3>SSO_GetDirectoryList($path)</h3>

<p>Parameters:</p>

<ul>
	<li>$path - A string containing a path from root (preferably an absolute path).</li>
</ul>

<p>Returns:  An array of two arrays of subdirectories ("dirs") and files ("files") within the directory specified by $path.</p>

<p>This function retrieves a list of subdirectories and files within the
  specified directory and sorts them with natcasesort().  Subdirectories
  go into one array of the array that is returned and is called "dirs". 
  Files go into another array and is called "files".</p>

<h3>SSO_RandomSleep()</h3>

<p>Parameters:  None.</p>

<p>Returns:  Nothing.</p>

<p>This function sleeps for a random amount of time up to 250 
milliseconds for a timing attack defense and forces all clients to take 
longer per request.</p>

<h3>SSO_AddSortedOutput(&amp;$outputmap, $numkey, $strkey, $data)</h3>

<p>Parameters:</p>

<ul>
	<li>$outputmap - An array of integer ($numkey) to string ($strkey) to string ($data) mappings.</li>
	<li>$numkey - An integer containing the order of the $data.</li>
	<li>$strkey - A string containing the name of the $data to avoid overwriting something else in the map that has the same $numkey.</li>
	<li>$data - A string containing the data to add to $outputmap.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This function is used to order a collection of HTML output that has been captured and stored until the output has been sorted.</p>

<h3>SSO_DisplaySortedOutput($outputmap)</h3>

<p>Parameters:</p>

<ul>
	<li>$outputmap - An array of integer ($numkey) to string ($strkey) to string ($data) mappings.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This function sorts and outputs the array contents.</p>

<h3>SSO_IsField($name)</h3>

<p>Parameters:</p>

<ul>
	<li>$name - A string containing a SSO field name.</li>
</ul>

<p>Returns:  A boolean of true if the field name exists, false otherwise.</p>

<p>This function checks to see if $name is in the $sso_fields.  During 
development, this function used to do a lot more, then it was 
drastically simplified at some point.</p>

<h3>SSO_SaveIPAddrInfo()</h3>

<p>Parameters:  None.</p>

<p>Returns:  A boolean of true if the $sso_ipaddr_info array was saved successfully, false otherwise.</p>

<p>This function is intended to be called after $sso_ipaddr_info has been modified.</p>

<h3>SSO_GetGeoIPOpts()</h3>

<p>Parameters:  None.</p>

<p>Returns:  An array of key-value pairs where the key is an internal GeoIP name and value is a boolean of true.</p>

<p>This is an internal function used by other Geolocation IP address functions.</p>

<h3>SSO_InitIPFields()</h3>

<p>Parameters:  None.</p>

<p>Returns:  An array initialized for use with other Geolocation IP address functions.</p>

<p>This function is intended to be used in the Init() function of a provider's 'iprestrict' configuration settings.</p>

<h3>SSO_ProcessIPFields($full = false)</h3>

<p>Parameters:</p>

<ul>
	<li>$full - A boolean that indicates whether or not this is the global configuration (Default is false).</li>
</ul>

<p>Returns:  An array containing Geolocation IP address information.</p>

<p>This function validates the inputs from SSO_AppendIPFields() and returns an array of Geolocation IP information to the caller.</p>

<h3>SSO_AppendIPFields(&amp;$contentopts, $info, $full = false)</h3>

<p>Parameters:</p>

<ul>
	<li>$contentopts - An array containing Admin Pack page information.</li>
	<li>$info - An array containing current Geolocation IP information.</li>
	<li>$full - A boolean that indicates whether or not this is the global configuration (Default is false).</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This function appends standard Geolocation IP address configuration 
fields to $contentopts.  Fields are validated with 
SSO_ProcessIPFields().</p>

<h3>SSO_GenerateSearchOutputCheckbox($name, $checked)</h3>

<p>Parameters:</p>

<ul>
	<li>$name - A string containing the name of the checkbox.  Must be unique.</li>
	<li>$checked - A boolean that indicates whether or not the checkbox should be checked.</li>
</ul>

<p>Returns:  A string containing a HTML 'input' element with clickable text that says 'Include in output'.</p>

<p>This function generates a custom checkbox for use with the 'htmldesc' option in search forms in the admin interface.</p>

<h3>SSO_GetGeoIPInfo()</h3>

<p>Parameters:  None.</p>

<p>Returns:  An array containing the location information for the remote
 IP address if a GeoIP database exists, a boolean of false otherwise.</p>

<p>This function looks up the remote IPv6 address in a GeoIP database and returns the information to the caller.</p>

<h3>SSO_IsSpammer($info)</h3>

<p>Parameters:</p>

<ul>
	<li>$info - An array of Geolocation IP information.</li>
</ul>

<p>Returns:  A boolean of true if the IP address is a known spammer, false otherwise.</p>

<p>This function checks DNSRBL database records and GeoIP location 
blacklists for both the global configuration and a provider 
configuration against the remote IP address.  The results are cached so 
that the queries against the various databases and services are 
minimized.  Information is cached for the specified length of time 
determined by the configuration.</p>

<h3>SSO_IsIPAllowed($info)</h3>

<p>Parameters:</p>

<ul>
	<li>$info - An array of Geolocation IP information.</li>
</ul>

<p>Returns:  A boolean of true if the remote IP address passes all whitelist filters, false otherwise.</p>

<p>This function checks the global IP address whitelist as well as any 
provider or API key filter.  Note that IP addresses can be spoofed, so 
this isn't flawless protection.</p>

<h3>SSO_GetNISTNumBits($password, $repeatcalc = false)</h3>

<p>Parameters:</p>

<ul>
	<li>$password - A string containing a password.</li>
	<li>$repeatcalc - A boolean to indicate whether repeat characters have less value or not (Default is false).</li>
</ul>

<p>Returns:  A numeric value representing the number of bits of strength
 present according to the NIST entropy calculation recommendations.</p>

<p>This function calculates password strength according to NIST rules.  
When $repeatcalc is true, alternate non-NIST rules are used that reduces
 the strength of repeat characters by 25% every time a character is 
used.</p>

<p>As of SSO Server/Client 3.0, this function has been renamed to 
GetNISTNumBits() and relocated to the Password Requirements module.</p>

<h3>SSO_IsStrongPassword($password, $minbits = 18, $usedict = false, $minwordlen = 4)</h3>

<p>Parameters:</p>

<ul>
	<li>$password - A string containing a password.</li>
	<li>$minbits - An integer containing the minimum number of bits of entropy to accept (Default is 18).</li>
	<li>$usedict - A boolean that determines whether or not to run dictionary checks (Default is false).</li>
	<li>$minwordlen - An integer that defines the shortest string length to look at (Default is 4).</li>
</ul>

<p>Returns:  A boolean of true if the password exceeds the $minbits threshold, false otherwise.</p>

<p>This function checks a password against a large set of rules that 
users have come up with over time that create really bad passwords.  At 
the 18 bits of entropy level with dictionary checks, 99% of all bad 
passwords are rejected outright.</p>

<p>As of SSO Server/Client 3.0, this function has been renamed to 
IsStrongPassword() and relocated to the Password Requirements module.</p>

<h3>SSO_GetRandomWord($randcapital = true, $words = array())</h3>

<p>Parameters:</p>

<ul>
	<li>$randcapital - A boolean that determines whether or not the first 
letter of the chosen word will be randomly capitalized (Default is 
true).</li>
	<li>$words - An array of words to choose from (Default is array(), which uses the dictionary).</li>
</ul>

<p>Returns:  A string containing a randomly selected word.</p>

<p>When $words is empty (the default), a random dictionary word is 
chosen.  If $words contains a set of words, one of the words in the 
array is chosen.  The Generic Login anti-phishing module utilizes the 
latter when constructing a random sentence.</p>

<h3>SSO_SaveSessionInfo()</h3>

<p>Parameters:  None.</p>

<p>Returns:  A boolean of true is the session information was successfully saved, false otherwise.</p>

<p>This function is intended to be called after modifying $sso_session_info.</p>

<h3>SSO_SendEmail($fromaddr, $toaddr, $subject, $htmlmsg, $textmsg)</h3>

<p>Parameters:</p>

<ul>
	<li>$fromaddr - A string containing the 'From' e-mail address.</li>
	<li>$toaddr - A string containing the 'To' e-mail address.</li>
	<li>$subject - A string containing the subject line.</li>
	<li>$htmlmsg - A string containing the HTML body.</li>
	<li>$textmsg - A string containing the text body.</li>
</ul>

<p>Returns:  A boolean of true if the e-mail was successfully sent, false otherwise.</p>

<p>This function sends a simple e-mail message using the Ultimate E-mail Toolkit.</p>

<h3>SSO_EncryptDBData($data)</h3>

<p>Parameters:</p>

<ul>
	<li>$data - The data to encrypt.</li>
</ul>

<p>Returns:  A string containing the serialized, single/dual encrypted (Blowfish or AES-256), and base64 encoded data.</p>

<p>This function prepares encrypted data to be used in a SQL query.</p>

<h3>SSO_DecryptDBData($data)</h3>

<p>Parameters:</p>

<ul>
	<li>$data - The data to decrypt.</li>
</ul>

<p>Returns:  A string containing the base64 decoded, single/dual 
decryptyed (Blowfish or AES-256), and unserialized data on success, a 
boolean of false otherwise.</p>

<p>This function decrypts data from the database.</p>

<h3>SSO_LoadDecryptedUserInfo($row)</h3>

<p>Parameters:</p>

<ul>
	<li>$row - An object containing user row information from the database.</li>
</ul>

<p>Returns:  An array containing both the decrypted and regular user information.</p>

<p>This function loads the unencrypted user information field and then 
decrypts the encrypted user information field into a single array of 
information from a row containing both 'info' and 'info2' object 
variables and returns the combined array to the caller.</p>

<h3>SSO_CreateEncryptedUserInfo(&amp;$userinfo)</h3>

<p>Parameters:</p>

<ul>
	<li>$userinfo - An array containing user information.</li>
</ul>

<p>Returns:  A string containing encrypted user information ready for a SQL query.</p>

<p>This function checks $sso_fields for the encryption status of the 
field and moves fields that are supposed to be encrypted out of 
$userinfo and into a separate array.  Then the separate array is 
encrypted and returned to the caller.  The net effect is that 
unencrypted fields are left alone in the $userinfo array such that both 
sets of data are ready for a SQL query.</p>

<h3>SSO_AddGeoIPMapFields(&amp;$info)</h3>

<p>Parameters:</p>

<ul>
	<li>$info - An array containing user information.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This internal function looks at the global Geolocation IP address to 
SSO field mappings and writes the information to the user information 
array based on the remote IP address' cached information.</p>

<h3>SSO_IsLockedUser($id)</h3>

<p>Parameters:</p>

<ul>
	<li>$id - A string containing a user ID.</li>
</ul>

<p>Returns:  A boolean of true if the user account is locked, false otherwise.</p>

<p>This function checks to see if a user account is locked.</p>

<h3>SSO_ActivateUserSession($row, $automate)</h3>

<p>Parameters:</p>

<ul>
	<li>$row - An object containing a row from the user database.</li>
	<li>$automate - A boolean that specifies if the validation phase should be automated.</li>
</ul>

<p>Returns:  A boolean of false if activation fails.  The browser is redirected on success.</p>

<p>This function activates a user and then proceeds to the next step (validation).</p>

<h3>SSO_ActivateNamespaceUser()</h3>

<p>Parameters:  None.</p>

<p>Returns:  A boolean of false if the namespace is invalid or activation fails.  The browser is redirected on success.</p>

<p>This function locates the namespace of the current API key, looks for
 an existing session in the same namespace, and activates a new session 
if a match is found.</p>

<h3>SSO_ActivateUser($id, $entropy, $info, $automate = false, $activatesession = true)</h3>

<p>Parameters:</p>

<ul>
	<li>$id - A string containing the provider ID for the user being activated.</li>
	<li>$entropy - A string containing optional, extra entropy.</li>
	<li>$info - An array containing user information.</li>
	<li>$automate - A boolean that specifies if the validation phase should be automated (Default is false).</li>
	<li>$activatesession - A boolean that specifies if a session should be activated for the user (Default is true).</li>
</ul>

<p>Returns:  A boolean of false if activation fails.  The browser is redirected on success.</p>

<p>This function activates a user and then proceeds to the next step 
(validation).  Activating a user either inserts a new record in the 
database or updates an existing record with the information from the 
provider.</p>

<p>The $activatesession variable is only used from within the SSO server
 admin where it makes sense to create an account but not sign in to it. 
 This option is used primarily for the Generic Login provider when 
creating new accounts within the SSO server admin.</p>

<h3>SSO_SetUserVersion($version)</h3>

<p>Parameters:</p>

<ul>
	<li>$version - An integer containing the new version of the user account.</li>
</ul>

<p>Returns:  A boolean of true if the version was successfully set, false otherwise.</p>

<p>This function sets the version of the user account as well as saving any changes to the $sso_user_info array.</p>

<h3>SSO_ExternalRedirect($url)</h3>

<p>Parameters:</p>

<ul>
	<li>$url - A string containing the URL to redirect to.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This function outputs HTML that causes the browser to redirect to the
 URL.  Javascript appears first for those browsers that have Javascript 
enabled and a meta refresh of three seconds is used for Javascript 
disabled scenarios.  This function is called wherever it becomes 
possible to exceed browser internal redirection limits (e.g. Internet 
Explorer will give up after 10 redirects).  This function bypasses those
 limits.</p>

<h3>SSO_ValidateUser()</h3>

<p>Parameters:  None.</p>

<p>Returns:  A boolean of false if validation fails.  The browser is redirected on success.</p>

<p>This function validates the session, clears temporary SSO server 
cookies, sets the namespace session to the new session ID, and redirects
 the browser back to the SSO client with a fully validated session.</p>

<h2>SSO Client Class and Functions</h2>

<p>The SSO client is a class that is creatively named "SSO_Client".  If 
you prefer working with functions instead, a single class instance 
($sso__client) and a set of wrapper functions are available via 
'client/functions.php'.  The SSO client also uses a number of other 
baseline Barebones CMS  components in the 'support' directory that are 
documented in the <a href="https://barebonescms.com/documentation/extra_components/">Extra Components</a>
 documentation.  A couple of the extra components have been made 
conflict-free by prefixing the function and class names with 'SSO_' 
because they are required for proper operation of the SSO client.</p>

<p>Most classes and functions begin with the prefix of 'SSO_'.  This is a reserved prefix.</p>

<p>Without further ado, here are the SSO client class member functions:</p>

<h3>SSO_Client::SendRequest($action, $options, $endpoint, $apikey, $secretkey)</h3>

<p>Parameters:</p>

<ul>
	<li>$action - A string representing the API action to execute.</li>
	<li>$options - An array containing options related to the API action (Default is array()).</li>
	<li>$endpoint - A string containing the URL of the SSO server endpoint (Default is SSO_SERVER_ENDPOINT_URL).</li>
	<li>$apikey - A string containing a valid SSO server API key (Default is SSO_SERVER_APIKEY).</li>
	<li>$secretkey - A string containing a valid SSO server secret key (Default is SSO_SERVER_SECRETKEY).</li>
</ul>

<p>Returns:  An array containing status and results of the query.</p>

<p>This member function is the workhorse behind how the SSO client 
communicates with a SSO server endpoint.  In general, there should be no
 need to call this function directly.</p>

<h3>SSO_Client::GetRemoteIP()</h3>

<p>Parameters:  None.</p>

<p>Returns:  An array containing normalized IP address information.</p>

<p>This static function normalizes the incoming IP address for various  
operations such as communicating with the SSO server.  This is the 
result  of a SSO_IPAddr::GetRemoteIP() call that includes any trusted 
proxies.</p>

<h3>SSO_Client::ProcPOSTStr($data)</h3>

<p>Parameters:</p>

<ul>
	<li>$data - A string to clean up.</li>
</ul>

<p>Returns:  A string that is trim()'ed and magic quote free.</p>

<p>This private member function is called by SSO_ProcessSingleInput() to
 clean up strings  so there is no surrounding whitespace and no magic 
quotes (if enabled).</p>

<h3>SSO_Client::ProcessSingleInput($data)</h3>

<p>Parameters:</p>

<ul>
	<li>$data - A superglobal to integrate into $sso_request.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This private member function is called by SSO_ProcessAllInput() to 
clean up a PHP superglobal and overwrite existing values in 
$sso_request.</p>

<h3>SSO_Client::ProcessAllInput()</h3>

<p>Parameters:  None.</p>

<p>Returns:  Nothing.</p>

<p>This private member function processes and filters $_COOKIE, $_GET, 
and $_POST into  the $sso_request global.  This function allows $_GET 
and $_POST to  override any $_COOKIE variables that were set of the same
 name (useful  for SWFUpload), trim()'s user input, and removes magic 
quotes.</p>

<h3>SSO_Client::SetCookieFixDomain($name, $value = "", ...)</h3>

<p>Parameters:</p>

<ul>
	<li>$name - A string containing the name of the cookie to set.</li>
	<li>$value - A string containing the value of the cookie to set (Default is "").</li>
	<li>$expires - An integer representing the expiration date of the cookie in UNIX timestamp format (Default is 0).</li>
	<li>$path - A string containing the path on which the cookie is valid (Default is "").</li>
	<li>$domain - A string containing the domain on which the cookie is valid (Default is "").</li>
	<li>$secure - A boolean that tells the browser to only send the cookie over HTTPS (Default is false).</li>
	<li>$httponly - A boolean that tells the browser whether or not 
Javascript should be able to access the cookie's value (Default is  
false).</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function is identical to the Extra Components SetCookieFixDomain() except it updates any superglobals.</p>

<h3>SSO_Client::IsSSLRequest()</h3>

<p>Parameters:  None.</p>

<p>Returns:  A boolean of true if the browser is loading the page via SSL, false otherwise.</p>

<p>This function is a clone of BB_IsSSLRequest().</p>

<h3>SSO_Client::GetRequestHost($protocol = "")</h3>

<p>Parameters:</p>

<ul>
	<li>$protocol - A string containing 'http' or 'https' (Default is "").</li>
</ul>

<p>Returns:  A string containing the host in URL format.</p>

<p>This static function is identical to BB_GetRequestHost() except it attempts to avoid name conflicts.</p>

<h3>SSO_Client::GetRequestURLBase()</h3>

<p>Parameters:  None.</p>

<p>Returns:  A string containing the path part of the request URL (excludes query string).</p>

<p>This static function is identical to BB_GetRequestURLBase().</p>

<h3>SSO_Client::GetFullRequestURLBase($protocol = "")</h3>

<p>Parameters:</p>

<ul>
	<li>$protocol - A string containing 'http' or 'https' (Default is "").</li>
</ul>

<p>Returns:  A string containing the full request URL.</p>

<p>This member function combines SSO_GetRequestHost() and SSO_GetRequestURLBase() to obtain the full request URL.</p>

<h3>SSO_Client::Translate()</h3>

<p>Parameters:</p>

<ul>
	<li>Variable arguments.</li>
</ul>

<p>Returns:  A translated string containing output from sprintf().</p>

<p>This private member function provides multilingual translation of an 
input  formatting string into a single output string based on the 
information  in SSO_Client::$langmap, $this-&gt;client_lang, and 
$this-&gt;client_def_lang.</p>

<h3>SSO_Client::PostTranslate($str)</h3>

<p>Parameters:</p>

<ul>
	<li>$str - A string to run partial or complete translations of.</li>
</ul>

<p>Returns:  A translated version of the string.</p>

<p>This private member function runs specialized partial or complete 
translations of  the input string based on the information in 
SSO_Client::$langmap, $this-&gt;client_lang, and 
$this-&gt;client_def_lang.</p>

<h3>SSO_Client::SetLanguage($path, $lang)</h3>

<p>Parameters:</p>

<ul>
	<li>$path - A string containing a valid path to the language packs.</li>
	<li>$lang - A string containing the name of the language pack to load and set.</li>
</ul>

<p>Returns:  An array that indicates success and contains an error string on failure.</p>

<p>This member function loads in the specified language pack (if not 
already loaded) and sets the $sso_client_lang global variable to the 
language.</p>

<h3>SSO_Client::InitLangmap($path, $default = "")</h3>

<p>Parameters:</p>

<ul>
	<li>$path - A string containing a valid path to the language packs.</li>
	<li>$default - A string containing the name of the default language pack to load and set.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This private member function initializes SSO_Client::$langmap, 
$this-&gt;client_lang, and $this-&gt;client_def_lang based  on the 
browser's preferences and available language packs.  Failures  are 
ignored.</p>

<h3>SSO_Client::ProcessLogin($info, $fromserver = false)</h3>

<p>Parameters:</p>

<ul>
	<li>$info - An array containing information loaded from the SSO server via the 'getlogin' API.</li>
	<li>$fromserver - A boolean that specifies if the information is coming from the SSO server (Default is false).</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This private member function processes the results of the 'getlogin' 
API if the call was successful.  If return information was requested - 
that is, this request just came back from the SSO server - that 
information is decrypted and loaded into the PHP superglobals so that 
the script can pick up where it left off.</p>

<p>The second parameter is stored so a future call to 
SSO_FromSSOServer() can be used to determine if the current request came
 from the return from the SSO server.  The SSO client tends to overwrite
 all input variables, so this helps preserve enough information to be 
able to avoid entering infinite loops (e.g. if the return url is 
'login.php', then this avoids returning to the SSO server and the 
browser can be redirected to another URL).</p>

<h3>SSO_Client::RSG_WriteSeedData(&amp;$data, &amp;$hash, $str, $reduce = true)</h3>

<p>Parameters:</p>

<ul>
	<li>$data - A string containing data.</li>
	<li>$hash - A resource containing a PHP hash_init("sha512") object or false.</li>
	<li>$str - A string to append to $data or $hash.</li>
	<li>$reduce - A boolean to specify whether or not to apply a sha1() and
 pack("H*") to $str before adding it to $data when $hash is false  
(Default it true).</li>
</ul>

<p>Returns:  A numeric value to be used to calculate a new cryptographic strength.</p>

<p>This private static function is used to build upon previous calls to 
this  function with new sources of entropy.  When $hash is false, 
$reduce is  used to help save memory by hashing the data being input and
 packing the  result.  When $hash is a resource, all data is run through
 the SHA-512  hash algorithm in a streaming fashion, so reduction 
doesn't matter.</p>

<h3>SSO_Client::RSG_GenerateToken($rootseed, $entropy = "")</h3>

<p>Parameters:</p>

<ul>
	<li>$rootseed - A string containing a root seed from a previous RSG_GenerateRootSeed() call.</li>
	<li>$entropy - An optional string containing additional entropy to use during token generation (Default is "").</li>
</ul>

<p>Returns:  A hex encoded string containing a token.</p>

<p>This private static function takes a root seed, assumed to be secure 
and have  sufficient cryptographic strength for the application, along 
with  optional, additional entropy, and generates a new token.  This 
function  is much faster than RSG_GenerateRootSeed() and is designed to 
generate  any number of tokens.</p>

<h3>SSO_Client::SafeRedirect($removekeys)</h3>

<p>Parameters:</p>

<ul>
	<li>$removekeys - An array containing key names to remove from the query string of the current URL.</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This private member function performs a redirect to a URL similar to 
the current URL but without any of the keys specified in the $removekeys
 and $sso_removekeys arrays.</p>

<h3>SSO_Client::LoggedIn()</h3>

<p>Parameters:  None.</p>

<p>Returns:  A boolean of true if the user is logged in, false otherwise.</p>

<p>This  member function checks for an encrypted cookie, decrypts it, 
loads decrypted  cookie information, checks the timestamp, and may query
 the SSO server  using the 'getlogin' API to determine if the user is 
actually logged in  under a number of different conditions.  The results
 of this call are  cached.</p>

<p>The SSO client may also be configured to force logging in  whenever 
the IP address changes via SSO_COOKIE_RESET_IPADDR_CHANGES in  
'config.php'.</p>

<h3>SSO_Client::FromSSOServer()</h3>

<p>Parameters:  None.</p>

<p>Returns:  A boolean of true if the current request is from the SSO server, false otherwise.</p>

<p>This member  function is used to differentiate regular requests from 
requests that  are from the SSO server.  The SSO client tends to 
overwrite all input  variables when a request comes in from the SSO 
server, so this helps  preserve  enough information to be able to avoid 
entering infinite  loops.  For example, if  the return url is 
'login.php', then this can be  used to avoid returning to the SSO  
server and the browser can sensibly  be redirected to another URL.</p>

<h3>SSO_Client::Init($removekeys = array())</h3>

<p>Parameters:</p>

<ul>
	<li>$removekeys - An array containing a set of keys to remove from the URL (Default is array()).</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function performs all of the initialization steps 
required for correct SSO client operations.  This function is called 
automatically when the client 'functions.php' file is 'require'd by 
another PHP script.  Including 'index.php' and initializing an instance 
of 'SSO_Client' should be done as soon as possible during a script's 
execution cycle to minimize potential issues with returning from the SSO
 server.</p>

<h3>SSO_Client::Login($lang = "", $msg = "", $extra = array())</h3>

<p>Parameters:</p>

<ul>
	<li>$lang - A string containing an IANA language code to pass to the SSO server.</li>
	<li>$msg - A string containing a custom message or 
'insufficient_permissions' to pass to the SSO server that will be 
displayed to the user.</li>
	<li>$extra - An array containing extra information to pass onto the SSO server via the return URL (Default is array()).</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function uses the SSO server 'initlogin' API to 
initialize a session.  The current request is encrypted and sent to the 
SSO server as part of the session setup for later retrieval so that the 
application can continue processing the request as if nothing happened. 
 The only circumstance where this won't work is if a file was uploaded 
to the web server.  The file will have to be uploaded again after 
returning to the SSO client.</p>

<p>When $msg is "insufficient_permissions", the SSO server treats the 
request differently and will always display the sign in options so the 
user has the opportunity to sign in with a different account with access
 to the requested resource.</p>

<p>The $extra array is information passed onto the SSO server that ends 
up as part of the URL that the browser will be redirected to.  Used 
primarily by the Remote Login provider.</p>

<h3>SSO_Client::CanRemoteLogin()</h3>

<p>Parameters:  None.</p>

<p>Returns:  A boolean of true if there is valid Remote Login information in the request, false otherwise.</p>

<p>This member function is used by the Deployer while integrating a 
Remote Login into their sign in infrastructure.  There is no point in 
continuing to execute code if this returns false as it would be 
impossible to complete the sign in.</p>

<h3>SSO_Client::RemoteLogin($userid, $fieldmap = array(), $endpoint, $apikey, $secretkey)</h3>

<p>Parameters:</p>

<ul>
	<li>$userid - A string containing a valid user ID that uniquely identifies the user.</li>
	<li>$fieldmap - An array containing the name of a field and the value it should map to.</li>
	<li>$endpoint - A string containing the URL of the SSO server endpoint (Default is SSO_SERVER_ENDPOINT_URL).</li>
	<li>$apikey - A string containing a valid SSO server Remote API key (Default is SSO_SERVER_APIKEY).</li>
	<li>$secretkey - A string containing a valid SSO server secret key (Default is SSO_SERVER_SECRETKEY).</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function performs a remote login using a Remote API key 
and secret.  Information is pushed into an existing temporary session in
 the SSO server and the browser is redirected to a preconfigured URL in 
the SSO server front end.  This function will only work when 
SSO_CanRemoteLogin() returns true.  On error, this function outputs the 
error message and immediately stops execution.</p>

<h3>SSO_Client::Logout()</h3>

<p>Parameters:  None.</p>

<p>Returns:  Nothing.</p>

<p>This member function uses the SSO server 'logout' API to delete a 
session.  The cookies for the current session are also deleted.  It is 
up to the application to redirect the browser somewhere after logging 
out.</p>

<h3>SSO_Client::HasDBData()</h3>

<p>Parameters:  None.</p>

<p>Returns:  A boolean of true if there is database-backed data storage for the user, false otherwise.</p>

<p>This member function is only useful when there is a local database 
with data storage for user information.  Use this function to determine 
if there is cached data to be stored in a database to avoid hitting the 
SSO server endpoint later.  The database data storage mechanism of the 
SSO client is optional.</p>

<h3>SSO_Client::LoadDBData($data)</h3>

<p>Parameters:</p>

<ul>
	<li>$data - A string containing encrypted data.</li>
</ul>

<p>Returns:  A boolean of true if the data was loaded successfully, false otherwise.</p>

<p>This member function accepts the data of a previous SSO_SaveDBData() 
call, base64 decodes, decrypts (Blowfish), uncompresses, and 
unserializes the data into internal information structures.  The 
database data storage mechanism of the SSO client is optional.</p>

<h3>SSO_Client::SaveDBData()</h3>

<p>Parameters:  None.</p>

<p>Returns:  A string containing encrypted data for storage in a database.</p>

<p>This member function serializes, compresses, encrypts (Blowfish), and
 base64 encodes internal information suitable for storage into a 
database cache.  The database data storage mechanism of the SSO client 
is optional.</p>

<h3>SSO_Client::IsSiteAdmin()</h3>

<p>Parameters:  None.</p>

<p>Returns:  A boolean of true if the user is a SSO server site admin, false otherwise.</p>

<p>This member function checks for the SSO server site admin tag and 
returns its value.  This is a special tag that is included in all 
'getlogin' API results.  Note that if the SSO client has been configured
 to not accept site admins (via SSO_CLIENT_ACCEPT_SITE_ADMIN in 
'config.php'), this will always return false.</p>

<h3>SSO_Client::HasTag($name)</h3>

<p>Parameters:</p>

<ul>
	<li>$name - A string containing a tag name.</li>
</ul>

<p>Returns:  A boolean of true if the user has the tag, false otherwise.</p>

<p>This member function checks the API key mapped tag set for the specified tag.</p>

<h3>SSO_Client::LoadUserInfo($savefirst = false)</h3>

<p>Parameters:</p>

<ul>
	<li>$savefirst - A boolean that indicates whether or not to save field information to the database.</li>
</ul>

<p>Returns:  A boolean of true if the user information was successfully loaded, false otherwise.</p>

<p>This member function is used to force user information to be loaded 
from the SSO server via the 'getlogin' API.  If $savefirst is true, the 
SSO client will attempt to update user information before loading it.</p>

<h3>SSO_Client::UserLoaded()</h3>

<p>Parameters:  None.</p>

<p>Returns:  A boolean of true if the user information was loaded from the SSO server, false otherwise.</p>

<p>This member function is useful to determine if information needs to 
be cached.  There are both encrypted cookie and database storage 
mechanisms that can be used to minimize the number of requests to the 
SSO server endpoint.</p>

<h3>SSO_Client::GetField($key, $default = false)</h3>

<p>Parameters:</p>

<ul>
	<li>$key - A string containing a field name.</li>
	<li>$default - A default value to use if the field $key does not exist (Default is false).</li>
</ul>

<p>Returns:  A string containing the field information from the SSO server or $default if no information is found.</p>

<p>This member function looks for a SSO client field from the API key 
field mapping and returns the value.  $default is returned if the 
information is not found.</p>

<h3>SSO_Client::GetEditableFields()</h3>

<p>Parameters:  None.</p>

<p>Returns:  An array containing the fields that can be written to in the SSO server.</p>

<p>This member function returns the writeable SSO server fields that the
 API key has access to.  The field must be read/write in the API key and
 not protected by the provider.  Useful for building a user profile 
editor.</p>

<h3>SSO_Client::SetField($key, $value)</h3>

<p>Parameters:</p>

<ul>
	<li>$key - A string containing a key.</li>
	<li>$value - A string containing the value to set.</li>
</ul>

<p>Returns:  A boolean of true if the field information was successfully set, false otherwise.</p>

<p>This member function checks the writeable fields to make sure $key 
can be written to and then sets the user information to $value.  Useful 
for building a user profile editor.</p>

<h3>SSO_Client::GetData($key, $default = false)</h3>

<p>Parameters:</p>

<ul>
	<li>$key - A string containing a data storage key.</li>
	<li>$default - A default value to use if the data for $key does not exist (Default is false).</li>
</ul>

<p>Returns:  A string containing the information or $default if no information is found.</p>

<p>This member function retrieves user data from either the encrypted 
cookie information or database storage.  Cached data is trustworthy 
because it is timestamped and encrypted with a key utilized solely by 
the SSO client.</p>

<h3>SSO_Client::SetData($key, $value, $maxcookielen = 50)</h3>

<p>Parameters:</p>

<ul>
	<li>$key - A string containing a data storage key.</li>
	<li>$value - A string containing the value to store.</li>
	<li>$maxcookielen - An integer containing the maximum length of strlen($key) + strlen($value) for inclusion in the encrypted cookie.</li>
</ul>

<p>Returns:  A boolean of true if the $value was cached, false otherwise.</p>

<p>This member function caches the key-value pair for saving later to 
the encrypted cookie and optional encrypted database storage.  The main 
purpose for using this function is to cache SSO server data locally so 
that the SSO client doesn't constantly make requests to the SSO server 
endpoint.  Cached data is trustworthy because it is timestamped and 
encrypted with a key utilized solely by the SSO client.  Fewer requests 
to the SSO server will significantly improve the performance of an 
application.  Note that data that is too large to include in the cookie 
is made available for local database storage.  Database storage is 
optional but can further improve application performance.</p>

<h3>SSO_Client::SaveUserInfo($usedb = false)</h3>

<p>Parameters:</p>

<ul>
	<li>$usedb - A boolean that indicates whether or not local database storage is being used (Default is false).</li>
</ul>

<p>Returns:  Nothing.</p>

<p>This member function sends the cookies to the web browser containing 
the encrypted cookie and validation cookies.  Cookies are only sent if 
user information changed.</p>

<h3>SSO_Client::GetUserID()</h3>

<p>Parameters:  None.</p>

<p>Returns:  A large integer containing the ID of the user.</p>

<p>This member function returns the unique user ID in the SSO server.</p>

<h3>SSO_Client::GetSecretToken()</h3>

<p>Parameters:  None.</p>

<p>Returns:  A string containing a secret token.</p>

<p>This member function returns a secret token for the current user that can be used to generate CSRF/XSRF defense tokens.</p>
</div>
	<div class="footerwrap">© <script type="text/javascript">document.write(new Date().getFullYear());</script>2014 CubicleSoft<script type="text/javascript">if (Gx__mobile_supported)  document.write(' | <a href="#" onclick="return SwitchSiteProfile(\'mobi\');">Mobile website</a>');</script> | <a href="#" onclick="return SwitchSiteProfile('mobi');">Mobile website</a></div>
</div>

</body></html>